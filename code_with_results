df = pd.read_csv("us_car_data.csv")

Index(['County', 'City', 'State', 'Postal Code', 'Model Year', 'Make', 'Model',
       'Electric Vehicle Type', 'CAFV', 'Electric Range', 'Base MSRP',
       'Legislative District', 'DOL Vehicle ID', 'Electric Utility',
       '2020 Census Tract', 'Longitude', 'latitude'],
      dtype='object')

17 columns
134475 rows


df.drop(['Longitude','latitude','Postal Code','Legislative District','City','DOL Vehicle ID','2020 Census Tract','State'],axis="columns",inplace=True)
DROPPING UNWANTED COLUMNS

df.to_csv("us_electric_car.csv",index=False)
SAVING IN NEW CSV





l = df.isna().sum()
m = df.duplicated().sum()

print(l)
print(m)

print(len(df))

County                   0
State                    0
Model Year               0
Make                     0
Model                    0
Electric Vehicle Type    0
CAFV                     0
Electric Range           0
Base MSRP                0
Electric Utility         0
dtype: int64
0
134474


FORTUNATELY, NO DUPLICATES AND NO NAN VALUES FOUND.

df.drop_duplicates(inplace=True)
df.dropna(inplace=True)
print(len(df))

134474

BUT JUST REMOVING FOR THE SAKE 
SAME NUMBER OF ROWS BEFORE AND AFTER
SO NO DUPLICATES AND NO NAN VALUES
















co = df.corr(numeric_only=True)
print(co)

                Model Year  Electric Range  Base MSRP
Model Year        1.000000       -0.388310  -0.227587
Electric Range   -0.388310        1.000000   0.096159
Base MSRP        -0.227587        0.096159   1.000000

HERE SUGGEST A VERY WEAK POSITIVE CORRELATION BETWEEN ELECTRIC RANGE AND BASE MSRP WHICH IS TRUE IN REAL WORLD.
REST ONLY HAS A NEGATIVE CORRELATION


















PPL = []
for i in df['Electric Utility']:
    PPL.append(len(re.split(r'\|\||\|', i)))

df['Electric_utility_availability'] = PPL
print(df)



           County  ... Electric_utility_availability
0        Thurston  ...                             1
1          Island  ...                             1
2       Snohomish  ...                             1
3            King  ...                             2
4       Snohomish  ...                             1
...           ...  ...                           ...
134469       King  ...                             2
134470       King  ...                             2
134471     Pierce  ...                             3
134472      Grant  ...                             1
134473     Kitsap  ...                             1

HERE ELECTRIC UTILITY MEANS AVAILABILITY OF ELECTRIC SOURCE
SO WE ARE ADDING A NEW FEATURE NAMED Electric_utility_availability WHICH SHOWS THE COUNT OF AVAILABLE SOURCES

HERE IN THE ABOVE CODE, UNDERSTAND ONE THING IN PATTERN  r'\|\||\|'
R' ESCAPE SEQUENCE(\) SYMBOL (|) ESCAPE SEQUENCE(\) SYMBOL (|) OR(|) ESCAPE SEQUENCE(\) SYMBOL (|) '
HERE ESCAPE SEQUENCE(\) SYMBOL (|) ESCAPE SEQUENCE(\) SYMBOL (|) ACCOUNTS FOR || AND
ESCAPE SEQUENCE(\) SYMBOL (|) ACCOUNTS FOR | 














from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()

l = label.fit_transform(df['Electric Utility'])
label_mapping = dict(zip(label.classes_, range(len(label.classes_))))
for i,j in label_mapping.items():
    print(j,i)


0 AVISTA CORP
1 BONNEVILLE POWER ADMINISTRATION||AVISTA CORP||BIG BEND ELECTRIC COOP, INC
2 BONNEVILLE POWER ADMINISTRATION||AVISTA CORP||INLAND POWER & LIGHT COMPANY
3 BONNEVILLE POWER ADMINISTRATION||AVISTA CORP||PUD NO 1 OF ASOTIN COUNTY
4 BONNEVILLE POWER ADMINISTRATION||BENTON RURAL ELECTRIC ASSN
5 BONNEVILLE POWER ADMINISTRATION||BIG BEND ELECTRIC COOP, INC
6 BONNEVILLE POWER ADMINISTRATION||CITY OF CENTRALIA - (WA)|CITY OF TACOMA - (WA)
7 BONNEVILLE POWER ADMINISTRATION||CITY OF COULEE DAM - (WA)
8 BONNEVILLE POWER ADMINISTRATION||CITY OF ELLENSBURG - (WA)
9 BONNEVILLE POWER ADMINISTRATION||CITY OF MCCLEARY - (WA)
10 BONNEVILLE POWER ADMINISTRATION||CITY OF MILTON - (WA)|CITY OF TACOMA - (WA)
11 BONNEVILLE POWER ADMINISTRATION||CITY OF PORT ANGELES - (WA)
12 BONNEVILLE POWER ADMINISTRATION||CITY OF RICHLAND - (WA)
13 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||ALDER MUTUAL LIGHT CO, INC|PENINSULA LIGHT COMPANY
14 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||BENTON RURAL ELECTRIC ASSN|PENINSULA LIGHT COMPANY
15 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||ELMHURST MUTUAL POWER & LIGHT CO|PENINSULA LIGHT COMPANY
16 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||LAKEVIEW LIGHT & POWER|PENINSULA LIGHT COMPANY
17 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||OHOP MUTUAL LIGHT COMPANY, INC|PENINSULA LIGHT COMPANY
18 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||PARKLAND LIGHT & WATER COMPANY|PENINSULA LIGHT COMPANY
19 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||PENINSULA LIGHT COMPANY
20 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||PUD NO 1 OF LEWIS COUNTY
21 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||PUD NO 1 OF MASON COUNTY
22 BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||PUD NO 3 OF MASON COUNTY
23 BONNEVILLE POWER ADMINISTRATION||COLUMBIA RURAL ELEC ASSN, INC
24 BONNEVILLE POWER ADMINISTRATION||INLAND POWER & LIGHT COMPANY
25 BONNEVILLE POWER ADMINISTRATION||NESPELEM VALLEY ELEC COOP, INC
26 BONNEVILLE POWER ADMINISTRATION||ORCAS POWER & LIGHT COOP
27 BONNEVILLE POWER ADMINISTRATION||PACIFICORP||BENTON RURAL ELECTRIC ASSN
28 BONNEVILLE POWER ADMINISTRATION||PACIFICORP||COLUMBIA RURAL ELEC ASSN, INC
29 BONNEVILLE POWER ADMINISTRATION||PACIFICORP||PUD NO 1 OF CLARK COUNTY - (WA)
30 BONNEVILLE POWER ADMINISTRATION||PENINSULA LIGHT COMPANY
31 BONNEVILLE POWER ADMINISTRATION||PUD 1 OF SNOHOMISH COUNTY
32 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF ASOTIN COUNTY
33 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF ASOTIN COUNTY||INLAND POWER & LIGHT COMPANY
34 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF BENTON COUNTY
35 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF CLALLAM COUNTY
36 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF CLARK COUNTY - (WA)
37 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF COWLITZ COUNTY
38 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF FERRY COUNTY
39 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF FRANKLIN COUNTY
40 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF GRAYS HARBOR COUNTY
41 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF JEFFERSON COUNTY
42 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF KITTITAS COUNTY
43 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF KLICKITAT COUNTY
44 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF MASON COUNTY|PUD NO 1 OF JEFFERSON COUNTY
45 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF SKAMANIA CO
46 BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF WAHKIAKUM COUNTY
47 BONNEVILLE POWER ADMINISTRATION||PUD NO 2 OF PACIFIC COUNTY
48 BONNEVILLE POWER ADMINISTRATION||PUGET SOUND ENERGY INC||PUD NO 1 OF JEFFERSON COUNTY
49 BONNEVILLE POWER ADMINISTRATION||TOWN OF EATONVILLE - (WA)|CITY OF TACOMA - (WA)
50 BONNEVILLE POWER ADMINISTRATION||TOWN OF RUSTON - (WA)|CITY OF TACOMA - (WA)||PENINSULA LIGHT COMPANY
51 BONNEVILLE POWER ADMINISTRATION||TOWN OF STEILACOOM|CITY OF TACOMA - (WA)||PENINSULA LIGHT COMPANY
52 BONNEVILLE POWER ADMINISTRATION||VERA IRRIGATION DISTRICT #15
53 CITY OF BLAINE - (WA)||PUD NO 1 OF WHATCOM COUNTY
54 CITY OF CHENEY - (WA)
55 CITY OF CHEWELAH
56 CITY OF SEATTLE - (WA)
57 CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)
58 CITY OF SUMAS - (WA)||PUD NO 1 OF WHATCOM COUNTY
59 CITY OF TACOMA - (WA)
60 CITY OF TACOMA - (WA)||TANNER ELECTRIC COOP
61 MODERN ELECTRIC WATER COMPANY
62 NO KNOWN ELECTRIC UTILITY SERVICE
63 OKANOGAN COUNTY ELEC COOP, INC
64 PACIFICORP
65 PORTLAND GENERAL ELECTRIC CO
66 PUD NO 1 OF CHELAN COUNTY
67 PUD NO 1 OF DOUGLAS COUNTY
68 PUD NO 1 OF OKANOGAN COUNTY
69 PUD NO 1 OF PEND OREILLE COUNTY
70 PUD NO 1 OF WHATCOM COUNTY
71 PUD NO 2 OF GRANT COUNTY
72 PUGET SOUND ENERGY INC
73 PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)
74 PUGET SOUND ENERGY INC||PUD NO 1 OF WHATCOM COUNTY




HERE WE USED LABEL ENCODER FROM SKLEARN TO ENCODE EACH ELECTRIC UTILITY STATION TO A NUMBER FOR A BETTER VIEWING

















CHECKING FOR ALL UNIQUE ELECTRIC UTILITY SOURCES

PPL = []
PPLL = []
for i in df['Electric Utility']:
    j = re.split(r'\|\||\|', i)
    for k in j:
        PPLL.append(k.strip())

print(len(PPLL))
PPS = set(PPLL)
print(len(PPS))


250218
62

62 UNIQUE UTILITY SOURCE



PRINTING OUT THOSE 62 SOURCES

{'NESPELEM VALLEY ELEC COOP, INC', 'PUD NO 1 OF CHELAN COUNTY', 'CITY OF MILTON - (WA)', 'CITY OF CHENEY - (WA)', 'PUD NO 1 OF FRANKLIN COUNTY', 'PUD NO 1 OF KITTITAS COUNTY', 'AVISTA CORP', 'PUD NO 1 OF JEFFERSON COUNTY', 'TOWN OF RUSTON - (WA)', 'CITY OF RICHLAND - (WA)', 'CITY OF TACOMA - (WA)', 'CITY OF SEATTLE - (WA)', 'PUD NO 3 OF MASON COUNTY', 'CITY OF BLAINE - (WA)', 'PUD NO 2 OF PACIFIC COUNTY', 'PUD NO 1 OF FERRY COUNTY', 'BENTON RURAL ELECTRIC ASSN', 'TOWN OF EATONVILLE - (WA)', 'ALDER MUTUAL LIGHT CO, INC', 'VERA IRRIGATION DISTRICT #15', 'INLAND POWER & LIGHT COMPANY', 'PUD NO 1 OF MASON COUNTY', 'CITY OF SUMAS - (WA)', 'PUD NO 1 OF GRAYS HARBOR COUNTY', 'PUD NO 1 OF OKANOGAN COUNTY', 'PUD NO 1 OF LEWIS COUNTY', 'PARKLAND LIGHT & WATER COMPANY', 'PUD NO 1 OF WAHKIAKUM COUNTY', 'NO KNOWN ELECTRIC UTILITY SERVICE', 'PUD NO 1 OF CLALLAM COUNTY', 'BONNEVILLE POWER ADMINISTRATION', 'OKANOGAN COUNTY ELEC COOP, INC', 'MODERN ELECTRIC WATER COMPANY', 'PACIFICORP', 'PUD NO 1 OF PEND OREILLE COUNTY', 'PUD NO 1 OF KLICKITAT COUNTY', 'PUD NO 1 OF ASOTIN COUNTY', 'PUD 1 OF SNOHOMISH COUNTY', 'BIG BEND ELECTRIC COOP, INC', 'PORTLAND GENERAL ELECTRIC CO', 'CITY OF CHEWELAH', 'PUD NO 1 OF DOUGLAS COUNTY', 'TANNER ELECTRIC COOP', 'CITY OF COULEE DAM - (WA)', 'PUD NO 1 OF COWLITZ COUNTY', 'PENINSULA LIGHT COMPANY', 'PUD NO 1 OF CLARK COUNTY - (WA)', 'CITY OF PORT ANGELES - (WA)', 'TOWN OF STEILACOOM', 'PUGET SOUND ENERGY INC', 'COLUMBIA RURAL ELEC ASSN, INC', 'CITY OF CENTRALIA - (WA)', 'LAKEVIEW LIGHT & POWER', 'CITY OF ELLENSBURG - (WA)', 'ELMHURST MUTUAL POWER & LIGHT CO', 'OHOP MUTUAL LIGHT COMPANY, INC', 'PUD NO 2 OF GRANT COUNTY', 'PUD NO 1 OF SKAMANIA CO', 'PUD NO 1 OF WHATCOM COUNTY', 'CITY OF MCCLEARY - (WA)', 'ORCAS POWER & LIGHT COOP', 'PUD NO 1 OF BENTON COUNTY'}




























from collections import Counter

utility_count = Counter(PPLL)

for i,j in utility_count.items():
    print(f"{i} : {j}")


PUGET SOUND ENERGY INC : 79757
CITY OF SEATTLE - (WA) : 24789
CITY OF TACOMA - (WA) : 82227
PUD NO 1 OF CHELAN COUNTY : 794
PACIFICORP : 1255
AVISTA CORP : 2365
PUD NO 1 OF PEND OREILLE COUNTY : 40
PUD NO 1 OF DOUGLAS COUNTY : 259
PUD NO 2 OF GRANT COUNTY : 409
MODERN ELECTRIC WATER COMPANY : 852
BONNEVILLE POWER ADMINISTRATION : 26269
PUD NO 1 OF CLARK COUNTY - (WA) : 7980
ORCAS POWER & LIGHT COOP : 798
PUD NO 1 OF WHATCOM COUNTY : 3313
PENINSULA LIGHT COMPANY : 6864
PUD NO 1 OF CLALLAM COUNTY : 656
PUD NO 1 OF COWLITZ COUNTY : 663
PUD 1 OF SNOHOMISH COUNTY : 1212
PUD NO 1 OF LEWIS COUNTY : 267
CITY OF RICHLAND - (WA) : 721
PUD NO 1 OF JEFFERSON COUNTY : 824
OHOP MUTUAL LIGHT COMPANY, INC : 93
INLAND POWER & LIGHT COMPANY : 2245
OKANOGAN COUNTY ELEC COOP, INC : 108
PUD NO 3 OF MASON COUNTY : 557
NO KNOWN ELECTRIC UTILITY SERVICE : 190
PUD NO 1 OF SKAMANIA CO : 158
BENTON RURAL ELECTRIC ASSN : 100
PUD NO 1 OF FRANKLIN COUNTY : 409
CITY OF CENTRALIA - (WA) : 110
CITY OF ELLENSBURG - (WA) : 90
PUD NO 1 OF GRAYS HARBOR COUNTY : 466
PUD NO 1 OF KLICKITAT COUNTY : 217
PUD NO 1 OF BENTON COUNTY : 966
CITY OF PORT ANGELES - (WA) : 172
ELMHURST MUTUAL POWER & LIGHT CO : 333
VERA IRRIGATION DISTRICT #15 : 275
LAKEVIEW LIGHT & POWER : 114
TOWN OF RUSTON - (WA) : 38
CITY OF MILTON - (WA) : 55
BIG BEND ELECTRIC COOP, INC : 65
CITY OF BLAINE - (WA) : 154
PUD NO 2 OF PACIFIC COUNTY : 164
PUD NO 1 OF WAHKIAKUM COUNTY : 45
PUD NO 1 OF MASON COUNTY : 96
PUD NO 1 OF OKANOGAN COUNTY : 82
TOWN OF STEILACOOM : 147
CITY OF CHENEY - (WA) : 31
PUD NO 1 OF FERRY COUNTY : 16
PUD NO 1 OF ASOTIN COUNTY : 55
PARKLAND LIGHT & WATER COMPANY : 79
PORTLAND GENERAL ELECTRIC CO : 3
TANNER ELECTRIC COOP : 189
TOWN OF EATONVILLE - (WA) : 20
COLUMBIA RURAL ELEC ASSN, INC : 25
PUD NO 1 OF KITTITAS COUNTY : 14
CITY OF CHEWELAH : 6
CITY OF MCCLEARY - (WA) : 8
ALDER MUTUAL LIGHT CO, INC : 2
CITY OF SUMAS - (WA) : 4
CITY OF COULEE DAM - (WA) : 2
NESPELEM VALLEY ELEC COOP, INC : 1































SAVED THAT IN A SEPERATE DATAFRAME FOR VISUALIZATION

df2 = pd.DataFrame()
ELECTRIC_UTILITY = []
COUNT = []
for i,j in utility_count.items():
    ELECTRIC_UTILITY.append(i)
    COUNT.append(j)
df2['ELECTRIC_UTILITY'] = ELECTRIC_UTILITY
df2['COUNT'] = COUNT
print(df2)

                  ELECTRIC_UTILITY  COUNT
0           PUGET SOUND ENERGY INC  79757
1           CITY OF SEATTLE - (WA)  24789
2            CITY OF TACOMA - (WA)  82227
3        PUD NO 1 OF CHELAN COUNTY    794
4                       PACIFICORP   1255
..                             ...    ...
57         CITY OF MCCLEARY - (WA)      8
58      ALDER MUTUAL LIGHT CO, INC      2
59            CITY OF SUMAS - (WA)      4
60       CITY OF COULEE DAM - (WA)      2
61  NESPELEM VALLEY ELEC COOP, INC      1

[62 rows x 2 columns]
















import matplotlib.pyplot as plt
plt.figure(figsize=(12,8))
plt.bar(df2['ELECTRIC_UTILITY'],df2['COUNT'])
plt.xlabel("ELECTRIC_UTILITY")
plt.ylabel("COUNT")
plt.xticks(rotation = 90)
plt.tight_layout()
plt.show()



FIGURE E1


CITY OF TACOMA THE LARGEST SOURCE
PUGET SOUND ENERGY INC THE SECOND
THEN COMES BONNEVILLE POWER ADMINISTRATION
THEN CITY OF SEATTLE



FOR A BETTER ANALYSIS, SORTING IN DESCENDING ORDER

print(df2.sort_values('COUNT',ascending = False))


                   ELECTRIC_UTILITY  COUNT
2             CITY OF TACOMA - (WA)  82227
0            PUGET SOUND ENERGY INC  79757
10  BONNEVILLE POWER ADMINISTRATION  26269
1            CITY OF SEATTLE - (WA)  24789
11  PUD NO 1 OF CLARK COUNTY - (WA)   7980
..                              ...    ...
59             CITY OF SUMAS - (WA)      4
51     PORTLAND GENERAL ELECTRIC CO      3
58       ALDER MUTUAL LIGHT CO, INC      2
60        CITY OF COULEE DAM - (WA)      2
61   NESPELEM VALLEY ELEC COOP, INC      1


ALSO SAVED IN A CSV FILE NAMED ELECTRIC_UTILITY_SOURCE_COUNT.csv

df2 = df2.sort_values('COUNT',ascending = False)
df2.to_csv("ELECTRIC_UTILITY_SOURCE_COUNT.csv",index=False)






















df = pd.read_csv("us_electric_car.csv",)
i = df[df['Base MSRP'] == 0]
print(len(i))
print(len(df))

131055
134474

HERE MOST OF BASE MSRP IS ZERO.
IT IS NOT POSSIBLE. 
SO WE CAN DROP IT


SO IF WE JUST RANDOMLY DROP ALL THOSE, THEN WE LOSE LARGE AMOUNT OF DATA
SO PLANNING TO DO ONE THING
GET THE VEHICLE BY COMBINING MAKE AND MODEL


df["Make"] = df["Make"].apply(lambda x: x.strip())
df["Model"] = df["Model"].apply(lambda x: x.strip())
df["VEHICLE"] = df['Make'] + " " + df['Model']
df["VEHICLE"] = df["VEHICLE"].apply(lambda x: x.strip())
print(df['VEHICLE'].unique(),end="\n\n")

j = df['VEHICLE'].unique()
print(len(j))




['TESLA MODEL 3' 'NISSAN LEAF' 'TESLA MODEL S' 'BMW I3' 'AUDI Q5 E'
 'TOYOTA PRIUS PRIME' 'KIA NIRO' 'TESLA MODEL Y' 'FIAT 500' 'FORD C-MAX'
 'TESLA MODEL X' 'CHEVROLET VOLT' 'BMW X5' 'FORD FUSION' 'HYUNDAI IONIQ'
 'BMW X3' 'VOLVO XC90' 'FORD FOCUS' 'BMW I8' 'CHEVROLET BOLT EV'
 'AUDI E-TRON' 'TOYOTA RAV4' 'AUDI A3' 'VOLVO XC60' 'FORD F-150'
 'VOLKSWAGEN E-GOLF' 'VOLVO S90' 'VOLVO XC40' 'CHRYSLER PACIFICA'
 'TOYOTA RAV4 PRIME' 'SMART FORTWO' 'HYUNDAI KONA ELECTRIC'
 'VOLKSWAGEN ID.4' 'CHEVROLET SPARK' 'RIVIAN R1S' 'BMW 330E'
 'SUBARU SOLTERRA' 'JEEP WRANGLER' 'VOLVO C40' 'HONDA CLARITY'
 'HYUNDAI IONIQ 5' 'FORD MUSTANG MACH-E' 'LINCOLN AVIATOR' 'LUCID AIR'
 'KIA SORENTO' 'KIA EV6' 'RIVIAN EDV' 'PORSCHE CAYENNE' 'FORD ESCAPE'
 'VOLVO S60' 'MITSUBISHI OUTLANDER' 'AUDI Q4' 'POLESTAR PS2'
 'SMART FORTWO ELECTRIC DRIVE' 'TOYOTA PRIUS PLUG-IN'
 'MERCEDES-BENZ EQS-CLASS SEDAN' 'CHEVROLET BOLT EUV' 'TOYOTA BZ4X'
 'RIVIAN R1T' 'KIA OPTIMA' 'PORSCHE TAYCAN' 'BMW I4' 'MINI COUNTRYMAN'
 'SMART EQ FORTWO' 'PORSCHE PANAMERA' 'BMW IX' 'NISSAN ARIYA' 'KIA SOUL'
 'BMW 530E' 'MITSUBISHI I-MIEV' 'MERCEDES-BENZ EQB-CLASS' 'MINI HARDTOP'
 'JEEP GRAND CHEROKEE' 'MERCEDES-BENZ S-CLASS' 'AUDI E-TRON GT'
 'KIA SOUL EV' 'LINCOLN CORSAIR' 'MERCEDES-BENZ B-CLASS' 'JAGUAR I-PACE'
 'AUDI E-TRON SPORTBACK' 'FORD TRANSIT' 'CADILLAC ELR'
 'MERCEDES-BENZ GLE-CLASS' 'HYUNDAI SANTA FE' 'HYUNDAI KONA' 'AUDI Q5'
 'LEXUS NX' 'TESLA ROADSTER' 'HYUNDAI SONATA'
 'MERCEDES-BENZ EQS-CLASS SUV' 'MERCEDES-BENZ GLC-CLASS' 'GENESIS G80'
 'GENESIS GV60' 'KIA SPORTAGE' 'AUDI RS E-TRON GT' 'BMW 740E'
 'WHEEGO ELECTRIC CARS WHEEGO' 'SUBARU CROSSTREK' 'HONDA ACCORD'
 'HYUNDAI TUCSON' 'CADILLAC LYRIQ' 'HYUNDAI IONIQ 6' 'FISKER KARMA'
 'MAZDA CX-90' 'BENTLEY FLYING SPUR' 'TH!NK CITY' 'CADILLAC CT6'
 'VOLVO V60' 'LAND ROVER RANGE ROVER SPORT' 'AUDI A7' 'FORD RANGER'
 'LAND ROVER RANGE ROVER' 'TOYOTA PRIUS' 'MERCEDES-BENZ EQE-CLASS SEDAN'
 'BMW 745E' 'BMW 745LE' 'MERCEDES-BENZ C-CLASS' 'LEXUS RZ 450E'
 'AZURE DYNAMICS TRANSIT CONNECT ELECTRIC' 'PORSCHE 918'
 'BENTLEY BENTAYGA' 'AUDI Q8' 'AUDI A8 E' 'GENESIS GV70'
 'CHEVROLET S-10 PICKUP']

125



SO NOW WE HAVE 125 UNIQUE ENTRIES
SO CHECK IF THERE IS ANY VEHICLE WHOSE BASE MSRP IS GREATER THAN ZERO.
IF IT IS GREATER THAN ZERO, THEN THAT CAN BE ASSUMED AS THE BASE PRICE.
ALSO IF HAVE MULTIPLE VALUES, THEN WE CAN TAKE THE MEAN PRICE


for i in j:
    g = df['Base MSRP'][df['VEHICLE'] == i]
    print(i,end="  ")
    print(len(g), end="  ")
    print(g.unique(),end="\n")


TESLA MODEL 3  25752  [0]
NISSAN LEAF  13008  [0]
TESLA MODEL S  7455  [69900     0 59900]
BMW I3  1892  [0]
AUDI Q5 E  579  [0]
TOYOTA PRIUS PRIME  2464  [0]
KIA NIRO  2603  [0]
TESLA MODEL Y  23531  [0]
FIAT 500  807  [0]
FORD C-MAX  1544  [0]
TESLA MODEL X  4866  [0]
CHEVROLET VOLT  4868  [0]
BMW X5  1926  [0]
FORD FUSION  1821  [0]
HYUNDAI IONIQ  206  [0]
BMW X3  287  [0]
VOLVO XC90  1163  [    0 64950]
FORD FOCUS  243  [0]
BMW I8  97  [0]
CHEVROLET BOLT EV  5414  [0]
AUDI E-TRON  918  [0]
TOYOTA RAV4  61  [0]
AUDI A3  572  [0]
VOLVO XC60  881  [52900     0]
FORD F-150  548  [0]
VOLKSWAGEN E-GOLF  1045  [0]
VOLVO S90  27  [0]
VOLVO XC40  492  [0]
CHRYSLER PACIFICA  2222  [    0 39995]
TOYOTA RAV4 PRIME  1337  [0]
SMART FORTWO  70  [0]
HYUNDAI KONA ELECTRIC  455  [0]
VOLKSWAGEN ID.4  2473  [0]
CHEVROLET SPARK  251  [0]
RIVIAN R1S  346  [0]
BMW 330E  403  [45600 44100     0 43700]
SUBARU SOLTERRA  209  [0]
JEEP WRANGLER  2221  [0]
VOLVO C40  277  [0]
HONDA CLARITY  777  [0]
HYUNDAI IONIQ 5  1236  [0]
FORD MUSTANG MACH-E  2203  [0]
LINCOLN AVIATOR  137  [0]
LUCID AIR  141  [0]
KIA SORENTO  462  [0]
KIA EV6  1429  [0]
RIVIAN EDV  253  [0]
PORSCHE CAYENNE  342  [    0 81100]
FORD ESCAPE  289  [0]
VOLVO S60  110  [0]
MITSUBISHI OUTLANDER  685  [0]
AUDI Q4  205  [0]
POLESTAR PS2  657  [0]
SMART FORTWO ELECTRIC DRIVE  152  [0]
TOYOTA PRIUS PLUG-IN  935  [0]
MERCEDES-BENZ EQS-CLASS SEDAN  145  [0]
CHEVROLET BOLT EUV  883  [0]
TOYOTA BZ4X  56  [0]
RIVIAN R1T  1206  [0]
KIA OPTIMA  105  [0]
PORSCHE TAYCAN  486  [0]
BMW I4  509  [0]
MINI COUNTRYMAN  200  [36900     0 36800]
SMART EQ FORTWO  55  [0]
PORSCHE PANAMERA  122  [     0 184400]
BMW IX  349  [0]
NISSAN ARIYA  130  [0]
KIA SOUL  422  [31950     0]
BMW 530E  383  [52650 54950     0 55700 53400]
MITSUBISHI I-MIEV  62  [0]
MERCEDES-BENZ EQB-CLASS  102  [0]
MINI HARDTOP  542  [0]
JEEP GRAND CHEROKEE  387  [0]
MERCEDES-BENZ S-CLASS  11  [0]
AUDI E-TRON GT  101  [0]
KIA SOUL EV  230  [32250 33950     0]
LINCOLN CORSAIR  74  [0]
MERCEDES-BENZ B-CLASS  89  [0]
JAGUAR I-PACE  222  [0]
AUDI E-TRON SPORTBACK  172  [0]
FORD TRANSIT  214  [0]
CADILLAC ELR  78  [0]
MERCEDES-BENZ GLE-CLASS  49  [0]
HYUNDAI SANTA FE  90  [0]
HYUNDAI KONA  196  [0]
AUDI Q5  136  [0]
LEXUS NX  64  [0]
TESLA ROADSTER  46  [110950 109000  98950]
HYUNDAI SONATA  76  [0]
MERCEDES-BENZ EQS-CLASS SUV  131  [0]
MERCEDES-BENZ GLC-CLASS  194  [0]
GENESIS G80  8  [0]
GENESIS GV60  57  [0]
KIA SPORTAGE  233  [0]
AUDI RS E-TRON GT  24  [0]
BMW 740E  25  [89100 90700 91250]
WHEEGO ELECTRIC CARS WHEEGO  3  [32995]
SUBARU CROSSTREK  63  [34995]
HONDA ACCORD  9  [0]
HYUNDAI TUCSON  82  [0]
CADILLAC LYRIQ  25  [0]
HYUNDAI IONIQ 6  49  [0]
FISKER KARMA  15  [102000]
MAZDA CX-90  12  [0]
BENTLEY FLYING SPUR  1  [0]
TH!NK CITY  4  [0]
CADILLAC CT6  16  [75095]
VOLVO V60  15  [0]
LAND ROVER RANGE ROVER SPORT  25  [0]
AUDI A7  10  [0]
FORD RANGER  14  [0]
LAND ROVER RANGE ROVER  17  [0]
TOYOTA PRIUS  4  [0]
MERCEDES-BENZ EQE-CLASS SEDAN  39  [0]
BMW 745E  8  [0]
BMW 745LE  2  [0]
MERCEDES-BENZ C-CLASS  17  [0]
LEXUS RZ 450E  16  [0]
AZURE DYNAMICS TRANSIT CONNECT ELECTRIC  8  [0]
PORSCHE 918  1  [845000]
BENTLEY BENTAYGA  2  [0]
AUDI Q8  1  [0]
AUDI A8 E  2  [0]
GENESIS GV70  2  [0]
CHEVROLET S-10 PICKUP  1  [0]



SO MANY HAVE UNIQUE VALUES AS ZERO
SO WE ARE JUST CHECKING ONLY WHICH DONT HAVE ZERO


for i in j:
    g = df['Base MSRP'][df['VEHICLE'] == i]
    if len(g.unique()) > 1:
        print(i,end="  ")
        print(len(g), end="  ")
        print(g.unique(),end="\n")


TESLA MODEL S  7455  [69900     0 59900]
VOLVO XC90  1163  [    0 64950]
VOLVO XC60  881  [52900     0]
CHRYSLER PACIFICA  2222  [    0 39995]
BMW 330E  403  [45600 44100     0 43700]
PORSCHE CAYENNE  342  [    0 81100]
MINI COUNTRYMAN  200  [36900     0 36800]
PORSCHE PANAMERA  122  [     0 184400]
KIA SOUL  422  [31950     0]
BMW 530E  383  [52650 54950     0 55700 53400]
KIA SOUL EV  230  [32250 33950     0]
TESLA ROADSTER  46  [110950 109000  98950]
BMW 740E  25  [89100 90700 91250]




import numpy as np

base_found_prc = {}
for i in j:
    g = df['Base MSRP'][df['VEHICLE'] == i]
    if len(g.unique()) > 1: 
        base_found_prc[i] = np.mean(g.unique())

df.loc[df['VEHICLE'].isin(base_found_prc.keys()), 'Base MSRP'] = df['VEHICLE'].map(base_found_prc)
j = df[df['Base MSRP'] == 0]
print(len(j))


120482

WE REPLACED ALL 0 WITH THE VALUES WE FOUND
HERE NOW WE HAVE COUNT AS 120482 WHICH IS LESS THAN 131055




NOW WE ARE TAKING THE VEHICLE WHOSE BASE MSRP IS STILL 0 AND MANUALLY FINDING THE BASE PRICE FROM REAL WORLD

df = pd.read_csv("us_electric_car.csv",)
i = df['VEHICLE'][df['Base MSRP'] == 0]
print(i.unique())


['TESLA MODEL 3' 'NISSAN LEAF' 'BMW I3' 'AUDI Q5 E' 'TOYOTA PRIUS PRIME'
 'KIA NIRO' 'TESLA MODEL Y' 'FIAT 500' 'FORD C-MAX' 'TESLA MODEL X'
 'CHEVROLET VOLT' 'BMW X5' 'FORD FUSION' 'HYUNDAI IONIQ' 'BMW X3'
 'FORD FOCUS' 'BMW I8' 'CHEVROLET BOLT EV' 'AUDI E-TRON' 'TOYOTA RAV4'
 'AUDI A3' 'FORD F-150' 'VOLKSWAGEN E-GOLF' 'VOLVO S90' 'VOLVO XC40'
 'TOYOTA RAV4 PRIME' 'SMART FORTWO' 'HYUNDAI KONA ELECTRIC'
 'VOLKSWAGEN ID.4' 'CHEVROLET SPARK' 'RIVIAN R1S' 'SUBARU SOLTERRA'
 'JEEP WRANGLER' 'VOLVO C40' 'HONDA CLARITY' 'HYUNDAI IONIQ 5'
 'FORD MUSTANG MACH-E' 'LINCOLN AVIATOR' 'LUCID AIR' 'KIA SORENTO'
 'KIA EV6' 'RIVIAN EDV' 'FORD ESCAPE' 'VOLVO S60' 'MITSUBISHI OUTLANDER'
 'AUDI Q4' 'POLESTAR PS2' 'SMART FORTWO ELECTRIC DRIVE'
 'TOYOTA PRIUS PLUG-IN' 'MERCEDES-BENZ EQS-CLASS SEDAN'
 'CHEVROLET BOLT EUV' 'TOYOTA BZ4X' 'RIVIAN R1T' 'KIA OPTIMA'
 'PORSCHE TAYCAN' 'BMW I4' 'SMART EQ FORTWO' 'BMW IX' 'NISSAN ARIYA'
 'MITSUBISHI I-MIEV' 'MERCEDES-BENZ EQB-CLASS' 'MINI HARDTOP'
 'JEEP GRAND CHEROKEE' 'MERCEDES-BENZ S-CLASS' 'AUDI E-TRON GT'
 'LINCOLN CORSAIR' 'MERCEDES-BENZ B-CLASS' 'JAGUAR I-PACE'
 'AUDI E-TRON SPORTBACK' 'FORD TRANSIT' 'CADILLAC ELR'
 'MERCEDES-BENZ GLE-CLASS' 'HYUNDAI SANTA FE' 'HYUNDAI KONA' 'AUDI Q5'
 'LEXUS NX' 'HYUNDAI SONATA' 'MERCEDES-BENZ EQS-CLASS SUV'
 'MERCEDES-BENZ GLC-CLASS' 'GENESIS G80' 'GENESIS GV60' 'KIA SPORTAGE'
 'AUDI RS E-TRON GT' 'HONDA ACCORD' 'HYUNDAI TUCSON' 'CADILLAC LYRIQ'
 'HYUNDAI IONIQ 6' 'MAZDA CX-90' 'BENTLEY FLYING SPUR' 'TH!NK CITY'
 'VOLVO V60' 'LAND ROVER RANGE ROVER SPORT' 'AUDI A7' 'FORD RANGER'
 'LAND ROVER RANGE ROVER' 'TOYOTA PRIUS' 'MERCEDES-BENZ EQE-CLASS SEDAN'
 'BMW 745E' 'BMW 745LE' 'MERCEDES-BENZ C-CLASS' 'LEXUS RZ 450E'
 'AZURE DYNAMICS TRANSIT CONNECT ELECTRIC' 'BENTLEY BENTAYGA' 'AUDI Q8'
 'AUDI A8 E' 'GENESIS GV70' 'CHEVROLET S-10 PICKUP']




{
    'TESLA MODEL 3': 38990,
    'NISSAN LEAF': 27990,
    'BMW I3': 44900,
    'AUDI Q5 E': 65500,
    'TOYOTA PRIUS PRIME': 27900,
    'KIA NIRO': 28990,
    'TESLA MODEL Y': 46990,
    'FIAT 500': 22990,
    'FORD C-MAX': 28995,
    'TESLA MODEL X': 99990,
    'CHEVROLET VOLT': 33995,
    'BMW X5': 66900,
    'FORD FUSION': 28995,
    'HYUNDAI IONIQ': 23350,
    'BMW X3': 49900,
    'FORD FOCUS': 21995,
    'BMW I8': 147500,
    'CHEVROLET BOLT EV': 27995,
    'AUDI E-TRON': 65900,
    'TOYOTA RAV4': 28500,
    'AUDI A3': 33900,
    'FORD F-150': 29995,
    'VOLKSWAGEN E-GOLF': 31495,
    'VOLVO S90': 52900,
    'VOLVO XC40': 52900,
    'TOYOTA RAV4 PRIME': 41900,
    'SMART FORTWO': 24990,
    'HYUNDAI KONA ELECTRIC': 33990,
    'VOLKSWAGEN ID.4': 42990,
    'CHEVROLET SPARK': 14995,
    'RIVIAN R1S': 84995,
    'SUBARU SOLTERRA': 44995,
    'JEEP WRANGLER': 33995,
    'VOLVO C40': 55900,
    'HONDA CLARITY': 33500,
    'HYUNDAI IONIQ 5': 43900,
    'FORD MUSTANG MACH-E': 45995,
    'LINCOLN AVIATOR': 67900,
    'LUCID AIR': 77900,
    'KIA SORENTO': 45995,
    'KIA EV6': 49995,
    'RIVIAN EDV': 69900,
    'FORD ESCAPE': 25995,
    'VOLVO S60': 39900,
    'MITSUBISHI OUTLANDER': 25995,
    'AUDI Q4': 49900,
    'POLESTAR PS2': 85000,
    'SMART FORTWO ELECTRIC DRIVE': 24990,
    'TOYOTA PRIUS PLUG-IN': 27900,
    'MERCEDES-BENZ EQS-CLASS SEDAN': 102310,
    'CHEVROLET BOLT EUV': 37995,
    'TOYOTA BZ4X': 42995,
    'RIVIAN R1T': 67995,
    'KIA OPTIMA': 24995,
    'PORSCHE TAYCAN': 83900,
    'BMW I4': 55900,
    'SMART EQ FORTWO': 24990,
    'BMW IX': 83400,
    'NISSAN ARIYA': 45900,
    'MITSUBISHI I-MIEV': 22700,
    'MERCEDES-BENZ EQB-CLASS': 55900,
    'MINI HARDTOP': 24900,
    'JEEP GRAND CHEROKEE': 37995,
    'MERCEDES-BENZ S-CLASS': 110850,
    'AUDI E-TRON GT': 104900,
    'LINCOLN CORSAIR': 42900,
    'MERCEDES-BENZ B-CLASS': 36400,
    'JAGUAR I-PACE': 69995,
    'AUDI E-TRON SPORTBACK': 74900,
    'FORD TRANSIT': 43800,
    'CADILLAC ELR': 75995,
    'MERCEDES-BENZ GLE-CLASS': 56700,
    'HYUNDAI SANTA FE': 27995,
    'HYUNDAI KONA': 24995,
    'AUDI Q5': 49900,
    'LEXUS NX': 39900,
    'HYUNDAI SONATA': 24995,
    'MERCEDES-BENZ EQS-CLASS SUV': 105000,
    'MERCEDES-BENZ GLC-CLASS': 46000,
    'GENESIS G80': 48900,
    'GENESIS GV60': 58900,
    'KIA SPORTAGE': 26995,
    'AUDI RS E-TRON GT': 139900,
    'HONDA ACCORD': 26895,
    'HYUNDAI TUCSON': 28995,
    'CADILLAC LYRIQ': 59995,
    'HYUNDAI IONIQ 6': 45900,
    'MAZDA CX-90': 43900,
    'BENTLEY FLYING SPUR': 231800,
    'TH!NK CITY': 27000,
    'VOLVO V60': 42900,
    'LAND ROVER RANGE ROVER SPORT': 71900,
    'AUDI A7': 54900,
    'FORD RANGER': 25995,
    'LAND ROVER RANGE ROVER': 104500,
    'TOYOTA PRIUS': 24995,
    'MERCEDES-BENZ EQE-CLASS SEDAN': 75900,
    'BMW 745E': 93900,
    'BMW 745LE': 98900,
    'MERCEDES-BENZ C-CLASS': 45900,
    'LEXUS RZ 450E': 59000,
    'AZURE DYNAMICS TRANSIT CONNECT ELECTRIC': 46900,
    'BENTLEY BENTAYGA': 179800,
    'AUDI Q8': 69900,
    'AUDI A8 E': 86900,
    'GENESIS GV70': 59900,
    'CHEVROLET S-10 PICKUP': 24995
}


THIS IS ALMOST FROM 3 WEBSITE GIVEN BY CHATGPT AND SEARCHED ALMOST 4-5 TIMES TO ENSURE VALUE REMAINS ALMOST THE SAME

ALSO THIS IS NOT OF ANY USED CAR SITE.
SO PRICE REMAINS ALMOST SAME FOR ALMOST EVERY MODEL



df.loc[df['VEHICLE'].isin(L.keys()),'Base MSRP'] = df['VEHICLE'].map(L)
i = df['VEHICLE'][df['Base MSRP'] == 0]
print(len(i))

0

SO WE ELIMINATED IT AND SAVING IN THE SAME DF FILE

























ALSO WHEN CHECKED RANGE,

i = df[df['Electric Range'] == 0]
print(len(i))

56618

IT IS HALF THE NUMBER,
SO JUST TRY THE SAME APPROACH AS LOOK FOR VEHICLE WHICH HAS A RANGE
THEN TAKE THE MEAN OF THE RANGES AND THEN INSERT IT IN ENTRIES WHERE 0 WAS FOUND


SO FIRST CHECK IF THERE IS ENTRIES WITH RANGE NOT ONLY 0 FOR THE SAME VEHICLE.

i = df[df['Electric Range'] == 0]
j = df['VEHICLE'].unique()

for i in j:
    g = df['Electric Range'][df['VEHICLE'] == i]
    if 0 in g.unique():
        print(i,end="  ")
        print(len(g), end="  ")
        print(g.unique(),end="\n")


TESLA MODEL 3  25752  [220 266 322 308 215   0]
NISSAN LEAF  13008  [  0 151  75  73 150 107  84 149 215]
TESLA MODEL S  7455  [208 330 249 210   0 337 265 270]
BMW I3  1892  [ 97  72  81 126 114 153   0]
KIA NIRO  2603  [239  26   0  33]
TESLA MODEL Y  23531  [291   0]
TESLA MODEL X  4866  [200 238 293 289   0]
HYUNDAI IONIQ  206  [ 29 170 124   0]
CHEVROLET BOLT EV  5414  [238 259   0]
AUDI E-TRON  918  [204   0 222]
FORD F-150  548  [0]
VOLVO XC40  492  [0]
HYUNDAI KONA ELECTRIC  455  [0]
VOLKSWAGEN ID.4  2473  [0]
RIVIAN R1S  346  [0]
SUBARU SOLTERRA  209  [0]
VOLVO C40  277  [0]
HYUNDAI IONIQ 5  1236  [0]
FORD MUSTANG MACH-E  2203  [0]
LUCID AIR  141  [0]
KIA EV6  1429  [0]
RIVIAN EDV  253  [0]
AUDI Q4  205  [0]
POLESTAR PS2  657  [233   0]
MERCEDES-BENZ EQS-CLASS SEDAN  145  [0]
CHEVROLET BOLT EUV  883  [0]
TOYOTA BZ4X  56  [0]
RIVIAN R1T  1206  [0]
PORSCHE TAYCAN  486  [192   0 203]
BMW I4  509  [0]
BMW IX  349  [0]
NISSAN ARIYA  130  [0]
MERCEDES-BENZ EQB-CLASS  102  [0]
MINI HARDTOP  542  [  0 110]
AUDI E-TRON GT  101  [0]
KIA SOUL EV  230  [ 93 111   0]
JAGUAR I-PACE  222  [234   0]
AUDI E-TRON SPORTBACK  172  [  0 218]
FORD TRANSIT  214  [0]
MERCEDES-BENZ EQS-CLASS SUV  131  [0]
GENESIS G80  8  [0]
GENESIS GV60  57  [0]
AUDI RS E-TRON GT  24  [0]
CADILLAC LYRIQ  25  [0]
HYUNDAI IONIQ 6  49  [0]
MERCEDES-BENZ EQE-CLASS SEDAN  39  [0]
LEXUS RZ 450E  16  [0]
AUDI Q8  1  [0]
GENESIS GV70  2  [0]



WE CAN JUST SIMPLY REMOVE WHICH HAS ONLY RANGE 0

SO FINDING ONLY WHICH HAS ZERO
for i in j:
    g = df['Electric Range'][df['VEHICLE'] == i]
    if 0 in g.unique() and len(g.unique()) == 1:
        print(i,end="  ")
        print(len(g), end="  ")
        print(g.unique(),end="\n")


FORD F-150  548  [0]
VOLVO XC40  492  [0]
HYUNDAI KONA ELECTRIC  455  [0]
VOLKSWAGEN ID.4  2473  [0]
RIVIAN R1S  346  [0]
SUBARU SOLTERRA  209  [0]
VOLVO C40  277  [0]
HYUNDAI IONIQ 5  1236  [0]
FORD MUSTANG MACH-E  2203  [0]
LUCID AIR  141  [0]
KIA EV6  1429  [0]
RIVIAN EDV  253  [0]
AUDI Q4  205  [0]
MERCEDES-BENZ EQS-CLASS SEDAN  145  [0]
CHEVROLET BOLT EUV  883  [0]
TOYOTA BZ4X  56  [0]
RIVIAN R1T  1206  [0]
BMW I4  509  [0]
BMW IX  349  [0]
NISSAN ARIYA  130  [0]
MERCEDES-BENZ EQB-CLASS  102  [0]
AUDI E-TRON GT  101  [0]
FORD TRANSIT  214  [0]
MERCEDES-BENZ EQS-CLASS SUV  131  [0]
GENESIS G80  8  [0]
GENESIS GV60  57  [0]
AUDI RS E-TRON GT  24  [0]
CADILLAC LYRIQ  25  [0]
HYUNDAI IONIQ 6  49  [0]
MERCEDES-BENZ EQE-CLASS SEDAN  39  [0]
LEXUS RZ 450E  16  [0]
AUDI Q8  1  [0]
GENESIS GV70  2  [0]



SOME HAS NUMBER MORE THAN 1000,
SO FIND OUT THOSE WHICH HAS LESS THAN 200 AS IF 200 CARS PRESENT, THEN  WE CAN FIND AN APPROX RANGE FROM ONLINE OR CAN SIMPLY DROP ON FURTHER ANALYSIS


for i in j:
    g = df['Electric Range'][df['VEHICLE'] == i]
    if 0 in g.unique() and len(g.unique()) == 1 and len(g) < 200:
        print(i,end="  ")
        print(len(g), end="  ")
        print(g.unique(),end="\n")


LUCID AIR  141  [0]
MERCEDES-BENZ EQS-CLASS SEDAN  145  [0]
TOYOTA BZ4X  56  [0]
NISSAN ARIYA  130  [0]
MERCEDES-BENZ EQB-CLASS  102  [0]
AUDI E-TRON GT  101  [0]
MERCEDES-BENZ EQS-CLASS SUV  131  [0]
GENESIS G80  8  [0]
GENESIS GV60  57  [0]
AUDI RS E-TRON GT  24  [0]
CADILLAC LYRIQ  25  [0]
HYUNDAI IONIQ 6  49  [0]
MERCEDES-BENZ EQE-CLASS SEDAN  39  [0]
LEXUS RZ 450E  16  [0]
AUDI Q8  1  [0]
GENESIS GV70  2  [0]


WE CAN DROP THESE MUCH ENTRIES

RRE = []
for i in j:
    g = df['Electric Range'][df['VEHICLE'] == i]
    if 0 in g.unique() and len(g.unique()) == 1 and len(g) < 200:
        RRE.append(i)

print(len(df))





THE BELOW ARE THE OTHER VALUES

548  [0.]  FORD F-150
492  [0.]  VOLVO XC40
455  [0.]  HYUNDAI KONA ELECTRIC
2473  [0.]  VOLKSWAGEN ID.4
346  [0.]  RIVIAN R1S
209  [0.]  SUBARU SOLTERRA
277  [0.]  VOLVO C40
1236  [0.]  HYUNDAI IONIQ 5
2203  [0.]  FORD MUSTANG MACH-E
1429  [0.]  KIA EV6
253  [0.]  RIVIAN EDV
205  [0.]  AUDI Q4
883  [0.]  CHEVROLET BOLT EUV
1206  [0.]  RIVIAN R1T
509  [0.]  BMW I4
349  [0.]  BMW IX
214  [0.]  FORD TRANSIT



HERE THE CURRENT LENGTH IS 133447
THE PREVIOUS LENGTH IS 134474 WHICH CONFIRES DROPPED




HERE WE ARE ALSO STANDARDIZING THE RANGE BY FINDING THE MEAN

base_ranger = {}
for i in j:
    g = df['Electric Range'][df['VEHICLE'] == i]
    if 0 not in g.unique():
        base_ranger[i] = round(np.mean(g.unique()),2)

df.loc[df['VEHICLE'].isin(base_ranger.keys()), 'Electric Range'] = df['VEHICLE'].map(base_ranger)



THE ABOVE STANDARDIZE THE MEAN TO ALL ENTRIES WHERE NO 0 PRESENT AS 0 CAN INFLUENCE THE COUNT AND AFFECT MEAN






NOW WE ARE GOING TO FIND AND REPLACE THE ELECTRIC RANGE WITH MEAN WHERE THERE OS 0 ALONG WITH OTHER ENTRIES

base_ranger0 = {}
for i in j:
    g = df['Electric Range'][df['VEHICLE'] == i]
    if 0 in g.unique():
        nnz = [i for i in g.unique() if int(i) != 0]
        if len(nnz) > 0:
            base_ranger0[i] = round(np.mean(nnz),2)
        else:
            base_ranger0[i] = 0

df.loc[df['VEHICLE'].isin(base_ranger0.keys()), 'Electric Range'] = df['VEHICLE'].map(base_ranger0)





NOW WE ARE CHECKING THE VEHICLES WHOSE RANGE IS 0 AND NUMBER OF A PARTICULAR VEHICLE IS OR GREATER THAN 200

i = df[df['Electric Range'] == 0]
print(len(i))
print(i['VEHICLE'].unique())

13287
['FORD F-150' 'VOLVO XC40' 'HYUNDAI KONA ELECTRIC' 'VOLKSWAGEN ID.4'
 'RIVIAN R1S' 'SUBARU SOLTERRA' 'VOLVO C40' 'HYUNDAI IONIQ 5'
 'FORD MUSTANG MACH-E' 'KIA EV6' 'RIVIAN EDV' 'AUDI Q4'
 'CHEVROLET BOLT EUV' 'RIVIAN R1T' 'BMW I4' 'BMW IX' 'FORD TRANSIT']




jk = {
    "FORD F-150": 232.36,
    "VOLVO XC40": 207.52,
    "HYUNDAI KONA ELECTRIC": 257.97,
    "VOLKSWAGEN ID.4": 239.85,
    "RIVIAN R1S": 316.35,
    "SUBARU SOLTERRA": 221.19,
    "VOLVO C40": 208.18,
    "HYUNDAI IONIQ 5": 257.34,
    "FORD MUSTANG MACH-E": 305.74,
    "KIA EV6": 309.48,
    "RIVIAN EDV": 313.82,
    "AUDI Q4": 243.58,
    "CHEVROLET BOLT EUV": 247.27,
    "RIVIAN R1T": 313.82,
    "BMW I4": 299.53,
    "BMW IX": 322.52,
    "FORD TRANSIT": 124.27
}

IN MILES


THE ABOVE ARE REAL LIFE VALUES GATHERED FROM INTERNET

df.loc[df['VEHICLE'].isin(jk.keys()),'Electric Range'] = df['VEHICLE'].map(jk)

REPLACED WITH THE VALUES 





AFTER ALL THE ABOVE REPLACING RANGE WITH MEAN AND 
FINALLY WE GOT THE REQUIRED


for i in j:
    g = df['Electric Range'][df['VEHICLE'] == i]
    print(len(g), end="       ")
    print(g.unique(),end="\n")


HERE I JUST COMPARED THE COUNT AND THEIR RANGE
HERE IT IS ACCEPTABLE
VALUES WITH LESS RANGE ARE HAVING ONLY LESS NUMBER OF A PARTICULAR VEHICLE
SO WE CAN REMOVE THAT AS OUTLIER IN FUTURE
BUT MOST OF THE VEHICLES HAVE ACCEPTABLE VALUE
ALSO COMPARED THAT WITH RANGE OF VEHICLES WHOSE RANGE WAS PREVIOUSLY 0 AND WANT TO CONFIRM THAT THE NEW VALUES FROM INTERNET ARE NOT AFFECTING AS THEIR NUMBER IS MUCH LESS COMPARED WITH TOTAL ENTRY


SO WE CAN NOW FIND THE FINAL MEAN AND REPLACE WITH RANGE 



df.loc[df['VEHICLE'].isin(base_ranger_FIN.keys()), 'Electric Range'] = df['VEHICLE'].map(base_ranger_FIN)

df['Electric Range'] = df['Electric Range'].apply(lambda x: int(x))



NOW CASE IT IN ANOTHER CSV FILE NAMED us_electric_carR.csv




df.drop(['CAFV'],axis="columns",inplace=True)
df.to_csv("us_electric_carR.csv",index=False)

WE DONT NEED CAFV AS CAFV IS NOT NEEDED AS WE CLEANED RANGE























WHEN VIEWING, MANY VEHICLES HAVE RANGE MARKED WHICH IS BELOW 100
SOME EVEN HAS RANGE BELOW 50
THEIR COUNTS ARE LESS AND ALL OF THEM OR 99 PERCENT HAS ELECTRIC VEHICLE TYPE AS PLUG IN HYBRID ELECTRIC

ALSO WHEN OBSERVING, WE CAN SEE ONE THING

MANY VEHICLES LIKE
JEEP GRAND CHEROKEE,  SUBARU CROSSTREK,  PORSCHE PANAMERA, AUDI A3,  MERCEDES-BENZ GLE-CLASS,  PORSCHE 918,  HONDA ACCORD,  BMW 530E,  JEEP WRANGLER AND MANY MORE WHICH DISPLAYS A RANGE SIMILAR TO THAT OF MILEAGE OF A CAR IN 1 LITRE.
SO WE CAN ASSUME THAT, WHILE ENTERING DATA, USER MIGHT MIINTERPRET PLUGIN ELECTRIC WITH KIND OF GASOLINE OR SOME ERROR HAS OCCURED



SO WE CAN TAKE THE COUNT OF ALL THOSE ERROR VALUES

df2 = pd.read_csv("Max_Range_Vehicle.csv")
print(df2.columns,end="\n\n")
h = df2['Count'][df2['Electric_Range'] < 100].sum()
print(h)

33500

THIS IS ONLY 1/4 TH OF TOTAL DATA AND ALSO NOT FULLY ELECTRIC VEHICLES


BUT WHEN CHECKING, SOME OF THOSE VALUES WHICH ARE ABOVE 60 ARE TRUE AS THOSE ARE TWO SEATED DEVELOPMENT VEHICLE,
SO WE CAN DROP THAT OF BELOW 50 AND THEN CHECK THAT OF IN BETWEEN 60 AND 100

DROPPING THOSE AND SAVING TO NEW DATAFRAME

df = df[df['Electric Range'] >= 60]
df.to_csv("us_electric_carRR.csv",index=False)


104755 IS THE LEN OF us_electric_carRR.csv



df3 = pd.read_csv("us_electric_carRR.csv")

l = df3.groupby(['VEHICLE','Electric Range','Model Year','Electric Vehicle Type']).size().sort_index(level='Electric Range', ascending=False)
l = l.reset_index()
l.columns = ["VEHICLE",'Electric_Range','Model Year','Electric Vehicle Type','Count']
l.to_csv("Max_Range_Vehicle.csv",index=False)



WE CAN USE THE OLDER DATAFRAME us_electric_carR.csv TO ANALIZE THE ELECTRIC UTILITY, VEHICLE DISTRIBUTION AND SOME OTHER THINGS





FINAL LENGTH OF DATAFRAME AFTER CLEANING RANGE IS 104706
USED CSV FILE us_electric_carR.csv
HERE WE REMOVED LESS THAN 60 INORDER TO AVOID OUTLIER AND ANALYSE SEPERATELY


ALSO IN HERE


ds = pd.read_csv("us_electric_carR.csv")
dr = ds.groupby(['Electric Vehicle Type']).size()
print(dr)

df = pd.read_csv("us_electric_carR.csv")
df1 = df[df['Electric Vehicle Type'] == "Plug-in Hybrid Electric Vehicle   "]
df2 = df1[df1['Electric Range']>=60]

print(len(df1))
print(len(df2))



Electric Vehicle Type
Battery Electric Vehicle              102397
Plug-in Hybrid Electric Vehicle        31050
dtype: int64
31050
2373


HERE ONLY 2373 ENTRIES ARE INCLUDED IN 102397 WHICH IS ONLY 2 PERCENT WHICH IS MUCH LESSER































NOW ITS ANALYSIS TIME



df = pd.read_csv("us_electric_carRR.csv")

cnt = df['Model Year'].value_counts()
print(cnt)

Model Year
2022    23586
2023    17879
2021    14963
2018    10289
2020     9645
2019     9040
2017     4742
2016     4052
2015     3875
2013     2945
2014     2096
2012      786
2011      735
2010       23
2008       19
2024       14
2000        9
1999        4
2002        2
1998        1
2003        1


HERE MOST OF THE CARS ARE FROM THE YEAR 2021,2022,2023 
ANOMALY OBSERVED AS THERE IS LESS COUNT IN 2024.
SO CANT CONSIDER 2024 AND WE CAN DROP IT


df = df[df["Model Year"]<2024]





ANALYZING TRENDS IN ELECTRIC CAR PURCHASE

m = df['Model Year'].value_counts()
plt.bar(m.index,m.values)
plt.xlabel("YEAR")
plt.ylabel("COUNT")
plt.xticks(rotation = 45)
plt.show()

FIGURE E2


IT IS EVIDENT THAT ELECTRIC CAR PURCHASE IS IN A STEADY INCREASE
ALSO THERE IS A DECREASE IN 2020 WHICH SUGGESTS THE EFFECT OF COVID AND INFLATION.
BUT THE MAIN REASON WAS, THERE IS NO REGISTRATION YEAR. WE ARE USING MODEL YEAR.
MAYBE THE LATEST MODEL OR FACELIFT WAS IN THE YEAR 2022 OR 2023 AS COMPANIES DONT USUALLY BRING UPDATED FACELIFTS OR NEW MODELS EVARY YEAR.
SO THAT IS THE REASON FOR A SUDDEN DROP
























CHECKING WHICH COUNTY HAS THE LARGEST NUMBER OF ELECTRIC VEHICLES

m = df['County'].value_counts()

plt.bar(m.index,m.values)
plt.xlabel("COUNTY")
plt.ylabel("COUNT")
plt.xticks(rotation = 65)
plt.show()



FIGURE E3

HERE COUNTY KING HOLDS MOST OF THE ELECTRIC VEHICLE,
THEN COMES SNOHOMISH AND PIERCE

WHEN I RESEARCHED IN INTERNET TO VARIFY THIS,
I WAS SURPRICED THAT INTERNET PROVIDED WITH THESE THREE COUNTIES AS THE FIRST 3 IN MOST DEVELOPED IN TERMS OF ECONOMY, INFRASTRUCTURE, QUALITY OF LIFE AND POPULATION.
THE INCREASE IN POPULATION, QUALITY OF LIGE AND GOOD INFRASTRUCTURE ALONG WITH ECONOMIC GROWTH IN COUNTY KING RESULTED IN THESE MUCH HIKE

















ALSO WE WANT TO CHECK IS THERE ANY RELATION WITH AVAILABLE ELECTRIC UTILITY RESOURCES.

plt.pie(k_val,labels=k_val.index)
plt.title("Electric Utility Availability in King County")
plt.show()

HERE WE USED us_electric_carR.csv RATHER THAN us_electric_carRR.csv AS EVEN IF THE USER ENTERS THE RANGE INCORRECTLY, THEIR IS A HIGH PROBABILITY THAT THEY ENTER THEIR ELECTRIC UTILITY CORRECTLY.
SO WE CAN GET A CLEAR PICTURE ABOUT THE DISTRIBUTION

FIGURE E4

FROM THE GRAPH, IT IS EVIDENT THAT 99 PERCENT HAS THE ATLEAST 2 AVAILABLE Electric Utility SOURCES
AND REMAINING 1 PERCENT HAS 3 
SO AS ELECTRIC UTILITY SOURCE ALSO PLAYS A ROLE IN INCREASED NUMBER OF ELECTRIC VEHICLES IN COUNTY KING
SILILARLY CHECK THAT FOR THE OTHER TOP COUNTIES


m = df['County'].value_counts()
T_COUNTY = [i for i, cnt in zip(m.index,m.values) if cnt > 7000]

c = 0
for i in T_COUNTY:
    k = df['Electric_utility_availability'][df['County'] == i]
    k_val = k.value_counts()

    plt.subplot(2,2,(c + 1))
    c += 1
    plt.pie(k_val,labels=k_val.index)
    plt.title(f"Electric Utility Availability in {i} County")

plt.tight_layout()
plt.show()

HERE USED 7000 TO FILTER OUT .
OTHERS CAN BE NEGLECTED COMPARED TO THESE VALUES WHEN CONSIDERING TOP COUNTIES WITH MORE ELECTRIC VEHICLES


FIGURE E5

IT IS OBSERVED THAT EXCEPT FOR SNOHOMISH, ALL THE OTHER HAVE A MAJORITY OF 2 OR 3 AND SOME EVEN HAVE 4
SO CAN CONCLUDE AS ELECTRIC UTILITY SOURCES INCREASES, SALES INCREASE IN THOSE AREAS

BUT JUST A CURIOCITY WHY IN Snohomish, EVEN THOUGH ONLY 1 SOURCE, WHY MORE SALES WHICH SEEMS TO BE DIFFERENT FROM THE REMAINING

SO CHECKING WHICH IS THE ELECTRIC UTILITY SOURCE PROVIDING ENERGY FOR THIS COUNTY


k = df['Electric Utility'][df['County'] == "Snohomish"]
k_val = k.value_counts()
print(k_val)

Electric Utility
PUGET SOUND ENERGY INC                                        14266
BONNEVILLE POWER ADMINISTRATION||PUD 1 OF SNOHOMISH COUNTY      833
NO KNOWN ELECTRIC UTILITY SERVICE    


HERE PUGET SOUND ENERGY INC IS THE MAX

SO CHECKING IF THE PUGET SOUND ENERGY INC IS A PROMINANT ENERGY SOURCE

k = df[df['Electric Utility'].str.contains("PUGET SOUND ENERGY INC")]
print(len(k))


79123


IT IS EVIDENT THAT MORE THAN HALF OF THE ENTRY USE PUGET SOUND ENERGY INC
SO IT CAN BE CONSIDERED AS A STABLE SOURCE THROUGHOUT WASHING TON
SO THATS WHY EVEN THOUGH ONLY ONE SOURCE, MORE ELECTRIC VEHICLES ARE REGISTERED THERE.
QUALITY OVER QUANTITY


FROM FROM ALL THE ABOVE, IF THERE IS A STABLE STANDARD ELECTRIC UTILITY SERVICE OR MORE ELECTRIC UTILITY SERVICE, THEN THERE IS A MORE CHANCE OF ELECTRIC VEHICLES REGISTERING THERE











































CHECKING WHICH BRAND SOLD THE MOST CARS

df = pd.read_csv("us_electric_carRR.csv")

k = df['Make'].value_counts()

plt.bar(k.index,k.values)
plt.xlabel("BRAND")
plt.ylabel("COUNT")
plt.xticks(rotation = 75)
plt.tight_layout()
plt.show()

FIGURE E6


TESLA THE MOST COMPARED WITH OTHERS, MUCH MORE WHICH IS GETTING POPULAR IN US NOWADAYS
THEN COMES NISSAN, CHEVROLET, KIA,VOLKSWAGEN,FORD, BMW

THIS IS EVIDENT THAT TESLA IS AN ELECTRIC VEHICLE ONLY PRODUCING BRAND
ALSO THEIR SALES ARE MORE
ALL THE OTHER VEHICLES ARE ACTUALLY GASOLINE FAVOURED AND ACTUALLY CHANGING TO ELECTRIC.
ON THE OTHER HAND, TESLA IS FULLY ELECTRIC EVEN FROM THE BEGINNING


ALSO ONE THING TO OBSERVE WAS ACTUALLY THIS BMW, FORD, NISSAN, CHEVROLET ARE NOT BAD BRANDS.
THEY ARE ACTUALLY PRODUCING HIGH PERFOMANCE GASOLINE CARS AND PEOPLE ACTUALLY WANT THEM TO BE GASOLINE DRIVEN MONSTERS INCLUDING ME.
BUT ONE THING TO NOTICE HERE WAS THEIR ELECTRIC VEHICLE ACCEPTANCE

ALSO LEXURIOUS CARS WHICH ARE MUCH EXPENSIVE LIKE JAGUAR, VOLVO, PORCHEARE SOLD MUCH LESS AS EVERYONE IIS NOT A MILLIONARE OR BILLIONER
ALSO NEW OR EXPERIMENTAL VEHICLES ARE ALSO SOLD LESS COMPARED WITH WELL KNOWN BRAND





















ANALYSING WHICH MODELS ARE SOLD THE MOST

MOST SOLD MODELS ARE 
MODEL 3
MODEL Y
LEAF
MODEL S
BOLT EV
VOLT 
MODEL X


HERE MOST SOLD MODEL WAS MODEL 3 WHICH IS THE MOST REALISTIC I FOUND
MODEL 3 IS THE CHEAPEST AMONG ALL TESLA MODELS WHICH IS AFFORDABLE FOR COMMON PEOPLE
ALL MODELS OF TESLA WAS IN FIRST 10
 ALSO WHEN YOU LOOK IN INTERNET, MODEL 3 IS THE MOST SOLD CAR FROM TESLA SIDE























CREATED A NEW DATAFRAME WITH COUNTY, TOTAL VEHICLES REGISTERED IN THAT COUNTY, FIRST , SECOND AND THIRD MOST SOLD VEHICLE ALONG WITH SOLD COUNT


m = df['County']
l = df['County'].unique()

tot_veh = []
cntr = Counter(m)
for i,j in cntr.items():
    tot_veh.append(j)

f_most_sold = []
f_most_sold_c = []
s_most_sold = []
s_most_sold_c = []
t_most_sold = []
t_most_sold_c = []

for i in l:
    k = df['Model'][df.County == i].value_counts(ascending=False)
    if len(k) > 0:
        f_most_sold.append(k.index[0])
        f_most_sold_c.append(k.values[0])
    else:
        f_most_sold.append(None)
        f_most_sold_c.append(0)

    if len(k) > 1:
        s_most_sold.append(k.index[1])
        s_most_sold_c.append(k.values[1])
    else:
        s_most_sold.append(None)
        s_most_sold_c.append(0)

    if len(k) > 2:
        t_most_sold.append(k.index[2])
        t_most_sold_c.append(k.values[2])
    else:
        t_most_sold.append(None)
        t_most_sold_c.append(0)

df2 = pd.DataFrame()
df2['COUNTY'] = l
df2['TOTAL VEHICLE'] = tot_veh
df2['FIRST MOST SOLD'] = f_most_sold
df2['FIRST MOST SOLD COUNT'] = f_most_sold_c
df2['SECOND MOST SOLD'] = s_most_sold
df2['SECOND MOST SOLD COUNT'] = s_most_sold_c
df2['THIRD MOST SOLD'] = t_most_sold
df2['THIRD MOST SOLD COUNT'] = t_most_sold_c





WITH THE HELP OF THIS DATAFRAME, WE CAN ANALYZE WHICH VEHICLE WAS THE MOST SOLD IN ANY COUNTY ALONG WITH THE PERCENTAGE .
ALSO CAN EVALUATE THE COMPETITORS AND THEIR PERCENTAGE


FOR EXAMPLE TAKE COUNTY Columbia
ANALYZE THEM USING THE ABOVE DATAFRAME


df2 = pd.read_csv("County_wise_vehicle_analysis.csv")

l = df2[df2['COUNTY']== "Columbia"]

print(f"FIRST MOST SOLD VEHICLE IN Columbia :  {l['FIRST MOST SOLD'].iloc[0]}")
print(f"ITS COUNT :  {l['FIRST MOST SOLD COUNT'].iloc[0]}")
print(f"SOLD PERCENTAGE COMPARED WITH TOTAL :  {(int(l['FIRST MOST SOLD COUNT'].iloc[0])/int(l['TOTAL VEHICLE'].iloc[0])) * 100}",end="\n\n")
print(f"SECOND MOST SOLD VEHICLE IN Columbia :  {l['SECOND MOST SOLD'].iloc[0]}")
print(f"ITS COUNT :  {l['SECOND MOST SOLD COUNT'].iloc[0]}")
print(f"SOLD PERCENTAGE COMPARED WITH TOTAL :  {(int(l['SECOND MOST SOLD COUNT'].iloc[0])/int(l['TOTAL VEHICLE'].iloc[0])) * 100}",end="\n\n")
print(f"THIRD MOST SOLD VEHICLE IN Columbia :  {l['THIRD MOST SOLD'].iloc[0]}")
print(f"ITS COUNT :  {l['THIRD MOST SOLD COUNT'].iloc[0]}")
print(f"SOLD PERCENTAGE COMPARED WITH TOTAL :  {(int(l['THIRD MOST SOLD COUNT'].iloc[0])/int(l['TOTAL VEHICLE'].iloc[0])) * 100}",end="\n\n")



FIRST MOST SOLD VEHICLE IN Columbia :  F-150
ITS COUNT :  5
SOLD PERCENTAGE COMPARED WITH TOTAL :  35.714285714285715

SECOND MOST SOLD VEHICLE IN Columbia :  BOLT EV
ITS COUNT :  3
SOLD PERCENTAGE COMPARED WITH TOTAL :  21.428571428571427

THIRD MOST SOLD VEHICLE IN Columbia :  MODEL S
ITS COUNT :  2
SOLD PERCENTAGE COMPARED WITH TOTAL :  14.285714285714285


SIMILARLY WE CAN ANALYZE THAT OF EVERY COUNTY





BUT OUT OF CURIOCITY, I WANT TO KNOW WHY IN KING COUNTY THIS MUCH HIKE
SO I SEARCHED IN INTERNET AND FOUND AN ANSWER WHICH IS SATISFYING


King County has indeed seen a large increase in electric vehicle (EV) registrations, a trend that stems from multiple supportive policies at both county and state levels. Washington state offers extensive EV incentives, including sales and use tax exemptions on new and used EVs, which reduce the initial cost of EV purchases. In King County, this is complemented by substantial investment in EV infrastructure and by utility companies like Puget Sound Energy (PSE) that offer incentives for EV charging and special rate plans to make EV operation more affordable.

At the state level, Washington has also secured federal funds under the National Electric Vehicle Infrastructure (NEVI) program, allocating millions for public charging points along major travel corridors, which benefits high-density areas like King County. This infrastructure development aligns with the state’s ambitious emissions reduction goals, contributing to an environment that strongly supports EV adoption. Additionally, local programs often prioritize environmental justice, supporting EV infrastructure in diverse and high-population regions within King County, encouraging further growth of EV adoption​


ALSO THEY PROVIDED WITH THE NAME Puget Sound Energy WHICH WE DONT MENTIONED WHILE SEARCHING AND FOUND OUT THROUGH OUR ANALYSIS.
SO ACCEPTABLE

































NOW WE CAN CHECK THE CORRELATION ONCE MORE


df = pd.read_csv("us_electric_carR.csv")
# print(df.columns)

co = df.corr(numeric_only=True)

				Model Year	Electric Range	Base MSRP	Electric_utility_availability
Model Year			1		0.516376871	0.125855472	-0.003198439
Electric Range			0.516376871	1		0.429011771	-0.003436821
Base MSRP			0.125855472	0.429011771	1		0.014543645
Electric_utility_availability	-0.003198439	-0.003436821	0.014543645	1


FIGURE E8
FIGURE E8a



HERE MODEL YEAR AND ELECTRIC RANGE HAVE A POSITIVE CORRELATION.
IT IS EVIDENT AS YEARS PASSBY, TECHNOLOGY DEVELOPS AND ULTIMATELY RANGE OF VEHICLE

ALSO SLIGHT POSITIVE CORRELATION BETWEEN BASE MSRP AND YEAR.
IT IS EVIDENT AS PRICE OF PRODUCTS INCREASE AS YEARS PASS BY DUE TO INFLATION AND OTHER FACTORS

NEGATIVE LITTLE CORRELATION BETWEEN MODEL YEAR AND ELECTRIC UTILITY AVAILABILITY
IT IS EVIDENT AS THERE IS NO NEED FOR OTHER SOURCES, BUT TO ENHANCE THE EFFICIENCY OF GRIDS AND POWER PRODUCTION IN EXISTING IS ENOUGH

POSITIVE CORRELATION BETWEEN ELECTRIC RANGE AND MSRP
QUITE NATURAL AS PRICE WILL INCREASE DUE TO INCREASE IN RANGE DUE TO TECHNOLOGICAL ADVANCEMENT AND ADVANCED BATTERY AND MOTOR PACK 

NEGATIVE CORRELATION BETWEEN ELECTRIC RANGE AND ELECTRIC UTILITY AVAILABILITY
EVIDENT THAT RANGE IS INDEPENDENT OF AVAILABILITY OF ENERGY RESOURCES. IT ONLY DEPENDS ON THE BATTERY CAPACITY AND EFFICIENCY OF MOTOR ALONG WITH OTHER FEATURES LIKE REGENERATORS





































ANALYSING ON Electric Vehicle Type


df = pd.read_csv("us_electric_carR.csv")
print(df['Electric Vehicle Type'].unique(),end="\n\n")

gr = df.groupby(['Electric Vehicle Type'])['County'].count()
print(gr)


explode = [.1]+[0]*(len(gr)-1)
plt.pie(gr,labels=gr.index,explode=explode)
plt.show()


['Battery Electric Vehicle   ' 'Plug-in Hybrid Electric Vehicle   ']

Electric Vehicle Type
Battery Electric Vehicle              102383
Plug-in Hybrid Electric Vehicle         2373


FIGURE E9



IT IS VISIBLE THAT 90 PERCENT OF ELECTRIC VEHICLE TYPE IS BATTERY ELECTRIC VEHICLE
ONLY 10 PERCENT OF ELECTRIC VEHICLE TYPE IS PLUG-IN HYBRID ELECTRIC VEHICLE


























NOW ANALYZING IN EACH COUNTY

FOR THAT WE CREATED A DATAFRAME AND SAVED AS ANOTHER CSV County_wise_electric_hybrid_distribution.csv


tot_veh = []
m = df['County']
cntr = Counter(m)
for i,j in cntr.items():
    tot_veh.append(j)

l = df['County'].unique()

county_battery = []
county_hybrid = []
for i in l:
    k = df['Electric Vehicle Type'][df['County'] == i].value_counts()
    if 'Battery Electric Vehicle' in k:
        county_battery.append(k['Battery Electric Vehicle'])
    else:
        county_battery.append(0)
    if 'Plug-in Hybrid Electric Vehicle' in k:
        county_hybrid.append(k['Plug-in Hybrid Electric Vehicle'])
    else:
        county_hybrid.append(0)


df2 = pd.DataFrame()
df2['COUNTY'] = l
df2['VEHICLE_COUNT'] = tot_veh
df2['COMPLETE_ELECTRIC'] = county_battery
df2['HYBRID_ELECTRIC'] = county_hybrid

df2.to_csv("County_wise_electric_hybrid_distribution.csv",index=False)




SO CREATED A FUNCTION NAMED find_hyb_ele_percent WHICH CAN BE USED TO GET THE INSIGHT ABOUT A COUNTY ALONG WITH ITS PLOT

df2 = pd.read_csv("County_wise_electric_hybrid_distribution.csv")

def find_hyb_ele_percent(county):
    county = str(county).strip()
    data = df2[df2['COUNTY'] == county]
    print(f"County name : {county}")
    print(f"Vehicle count : {data.VEHICLE_COUNT}")
    print(f"Complete electric vehicle count in : {data.COMPLETE_ELECTRIC}")
    print(f"Hybrid electric vehicle count in : {data.HYBRID_ELECTRIC}")
    C_E_P = (int(data.COMPLETE_ELECTRIC.iloc[0])/int(data.VEHICLE_COUNT.iloc[0]))*100
    C_H_P = (int(data.HYBRID_ELECTRIC.iloc[0])/int(data.VEHICLE_COUNT.iloc[0]))*100
    print(f"Percentage of complete electric vehicle : {C_E_P}")
    print(f"Percentage of hybrid electric vehicle : {C_H_P}")

    percentages = [C_E_P, C_H_P]
    labels = ["Electric percentage", "Hybrid percentage"]
    explode = [0.1, 0]

    plt.pie(percentages,labels=labels,explode=explode)
    plt.show()

county = input("Enter the county name : ")
find_hyb_ele_percent(county)



FROM THIS, WE CAN GET INSIGHT OF ANY COUNTY

LET TAKE AN EXAMPLE

Enter the county name : Benton
County name : Benton
Vehicle count : 21    1672
Name: VEHICLE_COUNT, dtype: int64
Complete electric vehicle count in : 21    1121
Name: COMPLETE_ELECTRIC, dtype: int64
Hybrid electric vehicle count in : 21    551
Name: HYBRID_ELECTRIC, dtype: int64
Percentage of complete electric vehicle : 67.04545454545455
Percentage of hybrid electric vehicle : 32.95454545454545

FIGURE E10



IN THIS WAY, WE CAN FIND THAT OF ANY COUNTY

IN MOST OF THE COUNTY, COMPLETE ELECTRIC VEHICLES ARE MORE COMPARED TO HYBRID
SO IN ONE WAY OR OTHER PEOPLE ARE CHANGING TO ELECTRIC


















NOW CHECK THAT OF TRENDS IN EACH YEAR


SO OUR AIM WAS TO DEVELOP A DATAFRAME WHICH HAS THE REQUIRED

df = pd.read_csv("us_electric_carR.csv")
k = df[df['County'] == "King"].copy()
j = k.groupby(['Model Year', 'Electric Vehicle Type']).size()

HERE OUR DATAFRAME K LOOKS IN A FORM WHICH IS NOT SUITABLE FOR US
SAMPLE BELOW

Model Year  Electric Vehicle Type             
2000        Battery Electric Vehicle                  4
2002        Battery Electric Vehicle                  1
2008        Battery Electric Vehicle                 12
2010        Battery Electric Vehicle                 13
2011        Battery Electric Vehicle                324
2012        Battery Electric Vehicle                323
2013        Battery Electric Vehicle               1382
2014        Battery Electric Vehicle                902
            Plug-in Hybrid Electric Vehicle         166




SO WE ARE USING A PIVOT TABLE TO TRANSFORM WITH AGGRGATE FUNCTION SIZE
pdf = k.pivot_table(index='Model Year', columns='Electric Vehicle Type', aggfunc='size', fill_value=0)

SAMPLE OF PDF

Electric Vehicle Type  Battery Electric Vehicle     Plug-in Hybrid Electric Vehicle   
Model Year                                                                            
2000                                             4                                   0
2002                                             1                                   0
2008                                            12                                   0
2010                                            13                                   0
2011                                           324                                   0
2012                                           323                                   0
2013                                          1382                                   0
2014                                           902                                 166



AGAIN TRANSFORMING THAT INTO 

pdf = pdf.reset_index()
pdf.columns = ['Model Year', 'Battery Electric Vehicle', 'Plug-in Hybrid Electric Vehicle']
print(pdf)

SAMPLE BELOW

    Model Year  Battery Electric Vehicle  Plug-in Hybrid Electric Vehicle
0         2000                         4                                0
1         2002                         1                                0
2         2008                        12                                0
3         2010                        13                                0
4         2011                       324                                0
5         2012                       323                                0
6         2013                      1382                                0
7         2014                       902                              166






NOW DEFINED A FUNCTION WHICH WILL SHOW THE VISUALIZATION EACH ELECTRIC VEHICLE TYPE TREND YEAR WISE
HERE WE DONT HAVE REGISTERED DATE, SO WE HAVE MODEL DATE.
WE CAN ASSUME THAT EVERY COMPANY IS SELLING THEIR NEWEST MODEL.
SO IT CAN BE CONSIDERED AS TE MODEL YEAR WITH A LITTLE EXCEPTION AT VERY LATEST YEAR

df = pd.read_csv("us_electric_carR.csv")

def get_electric_hybrid_analytics(county):
    county = str(county).strip()
    k = df[df['County'] == county].copy()
    pdf = k.pivot_table(index='Model Year', columns='Electric Vehicle Type', aggfunc='size', fill_value=0)
    pdf = pdf.reset_index()
    pdf.columns = ['Model Year', 'Battery Electric Vehicle', 'Plug-in Hybrid Electric Vehicle']

    plt.plot(pdf['Model Year'],pdf['Battery Electric Vehicle'],color = "green",label="Battery Electric Vehicle")
    plt.plot(pdf['Model Year'],pdf['Plug-in Hybrid Electric Vehicle'],color = "orange",label="Plug-in Hybrid Electric Vehicle")
    plt.title(f"Analytics in county {county}")
    plt.xlabel("Model year")
    plt.xlabel("count")
    plt.legend()
    plt.show()

county = input("Enter the name of county : ")
get_electric_hybrid_analytics(county)



CONSIDER THE EXAMPLE

Enter the name of county : King


FIGURE E11

HERE WHEN ANALYZING EACH COUNTY, WE CAN CONCLUDE THAT THERE IS A STEADY INCREASE FOR BOTH ELECTRIC VEHICLES AND HYBRID VEHICLES YEARWISE.
BUT WE CAN SEE A SUDDEN DROP IN 2022 OR 2023.
IT IS BECAUSE WE ARE USING MODEL YEAR.
MAYBE THE LATEST MODEL OR FACELIFT WAS IN THE YEAR 2022 OR 2023 AS COMPANIES DONT USUALLY BRING UPDATED FACELIFTS OR NEW MODELS EVARY YEAR.
SO THAT IS THE REASON FOR A SUDDEN DROP






































ANALYSING MAX RANGE

HERE WE CANNOT SIMPLY USE MAX_RANGER.CSV WHICH WE SAVED EARLIER AS THE RANGES ARE STANDARDIZED THROUGHOUT THE YEAR AND WE CANNOT OBSERVE INCREASE OR DECREASE IN THAT


df = pd.read_csv("us_electric_car.csv")

dr = df[['Make','Model','Model Year','Electric Range','VEHICLE']].drop_duplicates()
dr = dr.sort_values(by = ['Make','Model','Model Year']).reset_index()
df2 = pd.DataFrame(dr)

jdf = df2['VEHICLE'][df['Electric Range'] == 0]
kl = jdf.unique()
print(len(kl))

j = df2['VEHICLE'].unique()
no_range = []
for i in j:
    g = df2['Electric Range'][df2['VEHICLE'] == i]
    if 0 in g.unique() and len(g.unique()==1):
        no_range.append(i)

for i in no_range:
    hu = df2["Model Year"][df2['VEHICLE'] == i]
    print(i)
    print(hu.unique(),end="\n\n")

print(len(no_range))



HERE WE WANT TO FIND THE INCREASE IN RANGE .
IN THE EARLIER DATAFRAME, WE TOOK THE MEAN OF RANGE TO CHECK THE OVERALL RANGE FOR THOSE SCENARIOS.
NOW WE WANT THE INDIVIDUAL RANGE IN EACH YEAR FOR ANALYSIS PURPOSE

HERE KL HAS THE VEHICLES WHERE THERE IS ZERO RANGE ALONG WITH OTHER RANGES OR NOT
BUT NO_RANGE ONLY HAS VEHICLE WHERE THERE IS ONLY ZERO IN ENTIRE MODEL YEAR CURRESPONDING WITH THAT ENTRY

LEN OF KL IS 60
LEN OF NO RANGE IS 33

THEN WE PRONTED THE YEARS OF ALL ZERO RANGE




SAMPLE:
AUDI E-TRON
[2019 2021 2022 2023]

AUDI E-TRON SPORTBACK
[2020 2021 2022]

AUDI Q4
[2022 2023]

BMW I3
[2014 2015 2016 2017 2018 2019 2020 2021]

BMW I4
[2022 2023]

BMW IX
[2022 2023 2024]

CHEVROLET BOLT EUV
[2023]

CHEVROLET BOLT EV
[2017 2018 2019 2020 2021 2022 2023]




SO WE NEED TO MANUALLY FILL THOSE


SAVING THE ABOVE IN A DICTIONARY

no_range_vehicle = {}
for i in no_range:
    hu = df2["Model Year"][df2['VEHICLE'] == i]
    no_range_vehicle[i] = list(hu.unique())

print(no_range_vehicle)


{
'AUDI E-TRON': [2019, 2021, 2022, 2023], 
'AUDI E-TRON SPORTBACK': [2020, 2021, 2022], 
'AUDI Q4': [2022, 2023], 
'BMW I3': [2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021], 
'BMW I4': [2022, 2023], 
'BMW IX': [2022, 2023, 2024], 
'CHEVROLET BOLT EUV': [2023], 
'CHEVROLET BOLT EV': [2017, 2018, 2019, 2020, 2021, 2022, 2023], 
'FORD F-150': [2022, 2023], 
'FORD MUSTANG MACH-E': [2021, 2022, 2023], 
'FORD TRANSIT': [2022, 2023], 
'HYUNDAI IONIQ': [2017, 2018, 2019, 2020, 2021, 2022], 
'HYUNDAI IONIQ 5': [2022, 2023], 
'HYUNDAI KONA ELECTRIC': [2021, 2022, 2023], 
'JAGUAR I-PACE': [2019, 2020, 2021, 2022, 2023], 
'KIA EV6': [2022, 2023], 
'KIA NIRO': [2018, 2019, 2020, 2021, 2022, 2023], 
'KIA SOUL EV': [2017, 2018, 2019, 2020], 
'MINI HARDTOP': [2021, 2022, 2023, 2024], 
'NISSAN LEAF': [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023], 
'POLESTAR PS2': [2021, 2022, 2023], 
'PORSCHE TAYCAN': [2020, 2021, 2022, 2023], 
'RIVIAN EDV': [2022, 2023], 
'RIVIAN R1S': [2022, 2023], 
'RIVIAN R1T': [2022, 2023], 
'SUBARU SOLTERRA': [2023], 
'TESLA MODEL 3': [2017, 2018, 2019, 2020, 2021, 2022, 2023], 
'TESLA MODEL S': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023], 
'TESLA MODEL X': [2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023], 
'TESLA MODEL Y': [2020, 2021, 2022, 2023], 
'VOLKSWAGEN ID.4': [2021, 2022, 2023], 
'VOLVO C40': [2022, 2023], 
'VOLVO XC40': [2021, 2022, 2023]
}




SO AFTER MANY PROMPTING AND VARIFYING FROM INTERNET, I GOT THE VALUES

{
    'AUDI E-TRON': {2019: 204, 2021: 218, 2022: 222, 2023: 226},
    'AUDI E-TRON SPORTBACK': {2020: 218, 2021: 222, 2022: 226},
    'AUDI Q4': {2022: 241, 2023: 265},
    'BMW I3': {2014: 81, 2015: 81, 2016: 114, 2017: 114, 2018: 114, 2019: 153, 2020: 153, 2021: 153},
    'BMW I4': {2022: 301, 2023: 301},
    'BMW IX': {2022: 324, 2023: 324, 2024: 324},
    'CHEVROLET BOLT EUV': {2023: 247},
    'CHEVROLET BOLT EV': {2017: 238, 2018: 238, 2019: 238, 2020: 259, 2021: 259, 2022: 259, 2023: 259},
    'FORD F-150': {2022: 230, 2023: 320},
    'FORD MUSTANG MACH-E': {2021: 305, 2022: 314, 2023: 312},
    'FORD TRANSIT': {2022: 126, 2023: 126},
    'HYUNDAI IONIQ': {2017: 124, 2018: 124, 2019: 124, 2020: 170, 2021: 170, 2022: 170},
    'HYUNDAI IONIQ 5': {2022: 303, 2023: 303},
    'HYUNDAI KONA ELECTRIC': {2021: 258, 2022: 258, 2023: 258},
    'JAGUAR I-PACE': {2019: 234, 2020: 234, 2021: 234, 2022: 234, 2023: 246},
    'KIA EV6': {2022: 310, 2023: 310},
    'KIA NIRO': {2018: 239, 2019: 239, 2020: 239, 2021: 239, 2022: 239, 2023: 253},
    'KIA SOUL EV': {2017: 111, 2018: 111, 2019: 111, 2020: 243},
    'MINI HARDTOP': {2021: 110, 2022: 110, 2023: 114, 2024: 114},
    'NISSAN LEAF': {2011: 73, 2012: 73, 2013: 75, 2014: 84, 2015: 84, 2016: 107, 2017: 107, 2018: 151, 2019: 226, 2020: 226, 2021: 226, 2022: 226, 2023: 226},
    'POLESTAR PS2': {2021: 233, 2022: 270, 2023: 270},
    'PORSCHE TAYCAN': {2020: 227, 2021: 225, 2022: 246, 2023: 246},
    'RIVIAN EDV': {2022: 150, 2023: 150},
    'RIVIAN R1S': {2022: 316, 2023: 316},
    'RIVIAN R1T': {2022: 314, 2023: 314},
    'SUBARU SOLTERRA': {2023: 228},
    'TESLA MODEL 3': {2017: 310, 2018: 310, 2019: 310, 2020: 322, 2021: 353, 2022: 358, 2023: 358},
    'TESLA MODEL S': {2012: 265, 2013: 265, 2014: 265, 2015: 270, 2016: 315, 2017: 335, 2018: 335, 2019: 373, 2020: 402, 2021: 405, 2022: 405, 2023: 405},
    'TESLA MODEL X': {2016: 257, 2017: 295, 2018: 295, 2019: 328, 2020: 351, 2021: 371, 2022: 348, 2023: 348},
    'TESLA MODEL Y': {2020: 316, 2021: 326, 2022: 330, 2023: 330},
    'VOLKSWAGEN ID.4': {2021: 250, 2022: 275, 2023: 275},
    'VOLVO C40': {2022: 226, 2023: 226},
    'VOLVO XC40': {2021: 208, 2022: 223, 2023: 223}
}




def set_electric_range(row):
    vehicle = row['VEHICLE']
    model_year = row['Model Year']
    if vehicle in LK and model_year in LK[vehicle]:
        return LK[vehicle][model_year]
    return row['Electric Range']


df2['Electric Range'] = df2.apply(set_electric_range, axis=1)
print(df2)


df2.to_csv("Range_include_zero.csv",index=False)





NOW WE WANT TO FILL THE REMAINING ENTRIES WHERE THERE IS A ZERO IN ANY MODEL YEAR ALONG WITH NON ZERO VALUES


df = pd.read_csv("Range_include_zero.csv",na_values={"Electric Range" : 0})
M_Year = df['Model Year']
df.drop(['index'],axis="columns",inplace=True)
df['Model Year'] = pd.to_datetime(df['Model Year'],format="%Y")
df.set_index('Model Year',inplace=True)
df.interpolate(method="time")
df.reset_index(inplace=True)
df['Model Year'] = M_Year
print(len(df))

df = df[df["Electric Range"]>=60]
df.reset_index(inplace=True,drop=True)
print(len(df))


452
212


HERE THE LENGTH AFTER ELIMINATING RANGE BELOW 60, WE GOT 212 ENTRIES.
WHEN COMPARING THIS WITH OUR MEAN APPROACH WHICH WE USED EARLIER
 
dfl = pd.read_csv("Max_Range_Vehicle.csv")
print(len(dfl))
202

WE GOT IMPROVEMENT AS WE COULD NOW SAVE 10 VEHICLES EXTRA WHICH WHEN ASSUMING IN SEPERATE MODEL, MAKE AND YEAR WILL INCREASE THE DATA SIZE AND IMPROVES EFFICIENCY



NO WE WANT TO SAVE THIS IN A NEW CSV FILE

df.to_csv("Upgraded_max_ranger.csv",index=False)






ALSO WE NEEDED A COUNT TO CALCULATE THE ACCURATE INCREASE IN COUNT
SO WE ARE GENERATING A NEW DATAFRAME AND SAVING IT

df = pd.read_csv("us_electric_car.csv")

grc = df.groupby(['VEHICLE','Model Year']).size().reset_index(name = "Count")
td = pd.DataFrame(grc,columns=['VEHICLE','Model Year','Count'])
td.drop_duplicates(inplace=True)
td.to_csv("Count_Ranger.csv",index=False)





df1 = pd.read_csv("Upgraded_max_ranger.csv")
print(df1.head(10))



   Model Year  Make             Model  Electric Range                VEHICLE
0        2019  AUDI            E-TRON             204            AUDI E-TRON
1        2021  AUDI            E-TRON             218            AUDI E-TRON
2        2021  AUDI            E-TRON             218            AUDI E-TRON
3        2022  AUDI            E-TRON             222            AUDI E-TRON
4        2023  AUDI            E-TRON             226            AUDI E-TRON
5        2020  AUDI  E-TRON SPORTBACK             218  AUDI E-TRON SPORTBACK
6        2021  AUDI  E-TRON SPORTBACK             222  AUDI E-TRON SPORTBACK
7        2021  AUDI  E-TRON SPORTBACK             222  AUDI E-TRON SPORTBACK
8        2022  AUDI  E-TRON SPORTBACK             226  AUDI E-TRON SPORTBACK
9        2022  AUDI                Q4             241                AUDI Q4



WHEN ANALYSING THE DATA,
FOR EACH VEHICLE, AS MODEL YEAR INCREASES, RANGE IS INCREASING 
THIS DIRECTLY IMPLIES THAT AS YEAR PASSES, DEVELOPMENT AND TECHNOLOGY ADVANCEMENT OCCURS IN ELECTRIC VEHICLE SECTOR 

THIS TREND IS FOLLOWED FOR ALMOST EVERY VEHICLE AS WE ANALIZE THE CSV FILE





ANALYSING COUNT OF SALES PER COMPANY


df2 = pd.read_csv("Count_Ranger.csv")
df2 = df2[df2["Model Year"] < 2024]
df2.to_csv("Count_Ranger.csv",index=False)
print(df2[60:80])

                  VEHICLE  Model Year  Count
61                 BMW X5        2016    170
62                 BMW X5        2017    174
63                 BMW X5        2018    180
64                 BMW X5        2021    300
65                 BMW X5        2022    555
66                 BMW X5        2023    545
68           CADILLAC CT6        2017      3
69           CADILLAC CT6        2018     13
70           CADILLAC ELR        2014     59
71           CADILLAC ELR        2016     19
72     CHEVROLET BOLT EUV        2023    883
73      CHEVROLET BOLT EV        2017   1297
74      CHEVROLET BOLT EV        2018    421
75      CHEVROLET BOLT EV        2019    890
76      CHEVROLET BOLT EV        2020    953
77      CHEVROLET BOLT EV        2021    356
78      CHEVROLET BOLT EV        2022    935
79      CHEVROLET BOLT EV        2023    562
80  CHEVROLET S-10 PICKUP        1997      1
81        CHEVROLET SPARK        2014     58




HERE WE CAN OBSERVE SALES OF SOME COMPANY HAS INCREASED, WHEREAS THAT OF OTHERS HAVE DECREASED.



WROTE A FUNCTION WHICH GIVES TWO PLOTS WHICH SHOWS THE RELATION OF MODEL YEAR WITH COUNT AND RANGE


def get_vehicle_count_range_up(vehicle):

    vehicle = str(vehicle).strip()

    df1 = pd.read_csv("Upgraded_max_ranger.csv")
    df1 = df1[df1['VEHICLE']==vehicle]

    plt.subplot(1,2,1)
    plt.bar(df1['Model Year'],df1['Electric Range'])
    plt.xlabel("Year")
    plt.ylabel("Electric Range")
    plt.title("Model year v/s Electric Range")
    plt.xticks(df1['Model Year'].astype(int),rotation = 55)

    df2 = pd.read_csv("Count_Ranger.csv")
    df2 = df2[df2['VEHICLE'] == vehicle]
    plt.subplot(1,2,2)
    plt.bar(df2['Model Year'],df2['Count'])
    plt.xlabel("Year")
    plt.ylabel("Count")
    plt.title("Model year v/s Count")
    plt.xticks(df2['Model Year'].astype(int),rotation = 55)

    plt.show()

vehicle = input("Enter the name of vehicle : ")
get_vehicle_count_range_up(vehicle)


SAMPLE CASE 
Enter the name of vehicle : TESLA MODEL S


FIGURE E12








NOW WE CAN ANALYSE THE TREND IN ELECTRIC RANGE VS PRICE

df = pd.read_csv("us_electric_carRR.csv")

df['MSRP Bins'] = pd.cut(df['Base MSRP'], bins=10)
print(df['MSRP Bins'])
avg_range = df.groupby('MSRP Bins')['Electric Range'].mean()
print(avg_range)

avg_range.plot(kind='line', marker='.')
plt.xlabel("Base MSRP Range")
plt.ylabel("Average Electric Range (miles)")
plt.title("Average Electric Range by Base MSRP Range")
plt.show()


FIGURE E13



IT IS EVIDENT AS RANGE INCREASES PRICE INCREASES UPTO THE HIGHER RANGES.
BUT AT HIGHER RANGE VEHICLES, PICE VARIES, SOME HAS LOW, SOME HAS HIGH(ESPECIALLY LUXURIOUS)

DF = df["VEHICLE"][df['Electric Range'] >= 250]
print(DF.unique())


['TESLA MODEL 3' 'TESLA MODEL S' 'TESLA MODEL Y' 'TESLA MODEL X'
 'HYUNDAI KONA ELECTRIC' 'RIVIAN R1S' 'HYUNDAI IONIQ 5'
 'FORD MUSTANG MACH-E' 'KIA EV6' 'RIVIAN EDV' 'RIVIAN R1T' 'BMW I4'
 'BMW IX' 'HYUNDAI KONA']

LOOK, WE WANT TO OBSERVE THE TREND AS SHOWN ABOBE 250 IN GRAPH.
HERE THESE VEHICLES INCLUDE EXPENSIVE ROADSTERS LIKE TESLA MODEL S, SPORTS VEHICLES LIKE FORD MUSTANG MACH-E, LUXURIOUS XUVS LIKE TESLA MODEL Y, LUXURIOUS SEDANS, BUDGET FRIENDLY CARS LIKE HYUNDAI KONA, KIA EV6, 
AND MANY MORE.
SO THIS IS THE REASON FOR VARIEND TRENDS ABOVE 250 MILES RANGE





























EARLIER WE HAD DROPPED MANY ENTRIES WHERE ELECTRIC RANGE < 60
MOST OF THEM WHICH HAS ELECTRIC VEHICLE TYPE Plug-in Hybrid Electric Vehicle

SO WE NEED TO ANALYZE THOSE

df = pd.read_csv("us_electric_carR.csv")
df1 = df[df['Electric Vehicle Type'] == "Plug-in Hybrid Electric Vehicle   "]
df2 = df1[df1['Electric Range']>=60]

print(len(df1))
print(len(df2))

31050
2373






DISTRIBUTION OF ELECTRIC VEHICLE TYPES BEFORE CLEARING ALL THE RANGES < 60

FIGURE E14

gr = df.groupby(['Electric Vehicle Type']).size()

explode = [.1]+[0]*(len(gr)-1)
plt.pie(gr,labels=gr.index,explode=explode,shadow=True,autopct="%.1f%%")
plt.show()


SO ALMOST 23 % WERE THERE BEFORE WHICH IS ALMOST 1/4


ALSO WE CAN ANALYSE THE COUNT OF RANGE >= 60 AND RANGE < 60

gr = df.groupby(['Electric Vehicle Type']).size()

explode = [.1]+[0]
plt.pie([len(df1)-len(df2),len(df2)],labels=["Range < 60","Range >= 60"],explode=explode,shadow=True,autopct="%.1f%%")
plt.show()


FIGURE E15

ALMOST 92.4 PERCENT OF DATA FROM ELECTRIC VEHICLE TYPE = PLUGIN HYBRID IS LOST












df = pd.read_csv("us_electric_carR.csv")

df1 = df[df['Electric Vehicle Type'] == "Plug-in Hybrid Electric Vehicle   "]
df2 = df1[df1['Electric Range']<60]
df3 = df1[df1['Electric Range']>=60]

lk = df2['VEHICLE'].unique()
print(lk)


['AUDI Q5 E' 'TOYOTA PRIUS PRIME' 'FORD C-MAX' 'CHEVROLET VOLT' 'BMW X5'
 'FORD FUSION' 'BMW X3' 'VOLVO XC90' 'BMW I8' 'AUDI A3' 'VOLVO XC60'
 'VOLVO S90' 'CHRYSLER PACIFICA' 'TOYOTA RAV4 PRIME' 'BMW 330E'
 'JEEP WRANGLER' 'HONDA CLARITY' 'LINCOLN AVIATOR' 'KIA SORENTO'
 'PORSCHE CAYENNE' 'FORD ESCAPE' 'VOLVO S60' 'MITSUBISHI OUTLANDER'
 'TOYOTA PRIUS PLUG-IN' 'KIA OPTIMA' 'MINI COUNTRYMAN' 'PORSCHE PANAMERA'
 'BMW 530E' 'JEEP GRAND CHEROKEE' 'MERCEDES-BENZ S-CLASS'
 'LINCOLN CORSAIR' 'CADILLAC ELR' 'MERCEDES-BENZ GLE-CLASS'
 'HYUNDAI SANTA FE' 'AUDI Q5' 'LEXUS NX' 'HYUNDAI SONATA'
 'MERCEDES-BENZ GLC-CLASS' 'KIA SPORTAGE' 'BMW 740E' 'SUBARU CROSSTREK'
 'HONDA ACCORD' 'HYUNDAI TUCSON' 'FISKER KARMA' 'MAZDA CX-90'
 'BENTLEY FLYING SPUR' 'CADILLAC CT6' 'VOLVO V60'
 'LAND ROVER RANGE ROVER SPORT' 'AUDI A7' 'LAND ROVER RANGE ROVER'
 'TOYOTA PRIUS' 'BMW 745E' 'BMW 745LE' 'MERCEDES-BENZ C-CLASS'
 'PORSCHE 918' 'BENTLEY BENTAYGA' 'AUDI A8 E']


BY LOOKING AT THIS, WE CAN SEE, MOST OF THEM WAS ACTUALLY GASOLINE VEHICLES.
BUT CROSS CHECK IT TO VERIFY WHICH ALL ARE ACTUALLY HYBRID


ACTUAL_HYBRID_VEHICLES = [
    'AUDI Q5 E', 'TOYOTA PRIUS PRIME', 'FORD C-MAX', 'CHEVROLET VOLT', 'BMW X5',
    'FORD FUSION', 'BMW X3', 'VOLVO XC90', 'BMW I8', 'AUDI A3', 'VOLVO XC60',
    'VOLVO S90', 'CHRYSLER PACIFICA', 'TOYOTA RAV4 PRIME', 'BMW 330E',
    'JEEP WRANGLER', 'HONDA CLARITY', 'LINCOLN AVIATOR', 'KIA SORENTO',
    'PORSCHE CAYENNE', 'FORD ESCAPE', 'VOLVO S60', 'MITSUBISHI OUTLANDER',
    'TOYOTA PRIUS PLUG-IN', 'KIA OPTIMA', 'MINI COUNTRYMAN', 'PORSCHE PANAMERA',
    'BMW 530E', 'JEEP GRAND CHEROKEE', 'MERCEDES-BENZ S-CLASS',
    'LINCOLN CORSAIR', 'CADILLAC ELR', 'MERCEDES-BENZ GLE-CLASS',
    'HYUNDAI SANTA FE', 'AUDI Q5', 'LEXUS NX', 'HYUNDAI SONATA',
    'MERCEDES-BENZ GLC-CLASS', 'KIA SPORTAGE', 'BMW 740E', 'SUBARU CROSSTREK',
    'HONDA ACCORD', 'HYUNDAI TUCSON', 'MAZDA CX-90', 'CADILLAC CT6',
    'VOLVO V60', 'LAND ROVER RANGE ROVER SPORT', 'AUDI A7',
    'LAND ROVER RANGE ROVER', 'BMW 745E', 'BMW 745LE', 'MERCEDES-BENZ C-CLASS',
    'BENTLEY BENTAYGA', 'AUDI A8 E'
]
THESE ARE ACTUALLY THE HYBRID VEHICLES




df2 = df1[df1['Electric Range']<60]

lk = df2['VEHICLE'].unique()
print(len(lk))


ACTUAL_HYBRID_VEHICLES = [LIST MENTIONED ABOVE]

print(len(ACTUAL_HYBRID_VEHICLES))



58
54




HERE 54 VEHICLES ARE ACTUALLY HYBRID




SO HERE WE WANT TO GET THE REQUIRED DATAFRAME WHERE RANGE LESS THAN 60 WITH REQUIRED COLUMNS


dfl = df2[df2['VEHICLE'].isin(ACTUAL_HYBRID_VEHICLES)].copy()
dfl.drop(['Electric Utility','Electric_utility_availability','Model','Make','Electric Vehicle Type'],axis="columns",inplace=True)

dfl.to_csv("Hybrid_vehicle_lass60.csv",index=False)








df = pd.read_csv("Hybrid_vehicle_lass60.csv")

j = set(df['VEHICLE'])

dict_range = {}
for i in j:
    klm = df[df['VEHICLE'] == i]
    dict_range[i] = list(klm['Electric Range'].unique())
    print(list(klm['Electric Range'].unique()),end="  ")
    print(i)

FROM THE ABOVE, MOST OF THE HYBRID VEHICLE HAVE RANGES LESS THAN THAT OF ELECTRIC VEHICLE
IT IS ACTUALLY TRUE AND ON RESEARCHING ON INTERNET, I FOUND THAT THIS IS THE ELECTRIC ONLY RANGE 
SO THIS IS TRUE





SO WE ARE TAKING THE WHOLE VEHICLES WHICH HAVE RANNGE ABOVE 60 AND BELOW 60 FOR ANLYSING THE TRENDS IN HYBRID ELECTRIC VEHICLE 


df = pd.read_csv("us_electric_carR.csv")
df1 = df[df['Electric Vehicle Type'] == "Plug-in Hybrid Electric Vehicle   "].copy()
df1.drop(['Electric Utility','Electric_utility_availability','Model','Make','Electric Vehicle Type'],axis="columns",inplace=True)
df1.to_csv("Hybrid_vehicle_WHOLE.csv",index=False)











CHECKING IF THERE IS ANY ANY EMPTY RANGE OR EMPTY BASE MSRP
THERE IS NO CHANCE AS WE HAD ALREADY CLEANED.
BUT JUST CHECK TO ENSURE

drf = df[df['Electric Range'] == 0]
print(drf)
dpf = df[df['Base MSRP'] == 0]
print(dpf)

Empty DataFrame
Columns: [County, Model Year, Electric Range, Base MSRP, VEHICLE]
Index: []
Empty DataFrame
Columns: [County, Model Year, Electric Range, Base MSRP, VEHICLE]
Index: []




ALSO WE FINDED THE MEAN RANGE BEFORE.
SO WE WILL BE GETTING A MEAN UNIQUE RANGE AND NOT A GROUP OF RANGES


for i in df['VEHICLE'].unique():
    kl = df[df['VEHICLE']==i]
    print(list(kl['Electric Range'].unique()),end="  ")
    print(i)

[107]  BMW I3
[20]  AUDI Q5 E
[25]  TOYOTA PRIUS PRIME
[99]  KIA NIRO
[19]  FORD C-MAX
[42]  CHEVROLET VOLT
[24]  BMW X5
......
.
.
.
.





ANALYSING WHICH VEHICLES HAS THE LONGEST RANGE


df = pd.read_csv("Hybrid_vehicle_WHOLE.csv")

plt.bar(df['VEHICLE'],df['Electric Range'])
plt.xlabel("VEHICLE")
plt.ylabel("RANGE")
plt.xticks(rotation = 90)
plt.tight_layout()
plt.show()




BMW I3 FIRST,
THEN HUINDAI IONIQ
THEN KIA NIRO AND WHEEGO ELECTRIC WHEEGO

FIGURE E16






ANALYSING COUNT OF HYBRID VEHICLES IN DIFFERENT COUNTIES


df = pd.read_csv("Hybrid_vehicle_WHOLE.csv")

gr = df.groupby(['County']).size().reset_index()
gr.columns = ['County','Count']

plt.bar(gr['County'],gr['Count'])
plt.xlabel("COUNTY")
plt.ylabel("COUNT")
plt.xticks(rotation = 90)
plt.tight_layout()
plt.show()


FIGURE E17


AGAIN KING COUNTY WITH THE LARGEST NUMBER OF HYBRID VEHICLES








ALSO LOOKING FOR THE LARGEST MANUFACTURER AND MODEL

df = pd.read_csv("Hybrid_vehicle_WHOLE.csv")

gr = df.groupby(['VEHICLE']).size().reset_index()
gr.columns = ['VEHICLE','Count']

plt.bar(gr['VEHICLE'],gr['Count'])
plt.xlabel("VEHICLE")
plt.ylabel("COUNT")
plt.xticks(rotation = 90)
plt.tight_layout()
plt.show()

FIGURE E18

CHEVROLET LARGEST MANUFACTURER WITH MODEL VOLT
THEN COMES CHRYSLER, JEEP AND TOYOTA WITH MODELS
PACIFICA , WRANGLER, PRIUS PRIME













NOW IF WE WANT THE YEAR WISE TREND, WE NEED TO USE THE SAME TACTICS WE USED FOR ELECTRIC VEHICLES


df = pd.read_csv("Range_include_zero.csv",na_values={"Electric Range" : 0})
M_Year = df['Model Year']
df.drop(['index'],axis="columns",inplace=True)
df['Model Year'] = pd.to_datetime(df['Model Year'],format="%Y")
df.set_index('Model Year',inplace=True)
df.interpolate(method="time")
df.reset_index(inplace=True)
df['Model Year'] = M_Year

dlf = pd.read_csv("Hybrid_vehicle_WHOLE.csv")
drf = df[df['VEHICLE'].isin(dlf['VEHICLE'].unique())]
drf.reset_index(inplace=True,drop=True)

drf.to_csv("Upgraded_max_ranger_HYBRID.csv",index=False)






df = pd.read_csv("Upgraded_max_ranger_HYBRID.csv")
print(len(df))
dlr = df[['Model Year','Electric Range','VEHICLE']].drop_duplicates()
dlrs = dlr.sort_values(by=['VEHICLE','Model Year']).reset_index(drop=True)
print(len(dlr))

dflrs = pd.DataFrame(dlrs)
dflrs.to_csv("Upgraded_max_ranger_HYBRID.csv",index=False)

268
250

HERE DUPLICATES DROPS AND SORTED









df = pd.read_csv("Upgraded_max_ranger_HYBRID.csv")
df = df[df['Model Year']<2024]
jl = df['VEHICLE'].unique()
yl = df['Model Year'].unique()

for i in jl:
    dlr = df[df['VEHICLE'] == i]
    plt.plot(dlr['Model Year'], dlr['Electric Range'], marker='.', label=i)

plt.xlabel("Model Year")
plt.ylabel("Electric Range (miles)")
plt.title("Electric Range Over Time for Each Vehicle")
plt.legend(fontsize = "xx-small")
plt.show()

FIGURE E19

HERE FROM FIGURE , RANGE INCREASES FOR ALMOST 90 PERCENT OF HYBRID VEHICLES










for i in jl:
    dlr = df[df['VEHICLE'] == i]
    plt.bar(dlr['Model Year'], dlr['Electric Range'], label=i)

plt.xlabel("Model Year")
plt.ylabel("Electric Range (miles)")
plt.title("Electric Range Over Time for Each Vehicle")
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=1, fontsize='xx-small')
plt.show()

FIGURE E20

BETTER VISUALIZATION TO VISUALIZE PER YEAR












COMPARING THE TRENDS IN ELECTRIC VEHICLE V/S HYBRID VEHICLE SALES PER YEAR


df = pd.read_csv("us_electric_carR.csv")
df = df[df['Model Year']<2024]

df1 = df[df['Electric Vehicle Type'] == "Battery Electric Vehicle   "]
df2 = df[df['Electric Vehicle Type'] == "Plug-in Hybrid Electric Vehicle   "]

ger = df1.groupby(['Model Year']).size().reset_index()
ger.columns = ['Model Year','Count']
ghr = df2.groupby(['Model Year']).size().reset_index()
ghr.columns = ['Model Year','Count']

# print(ger)
# print(ghr)

plt.plot(ger['Model Year'],ger['Count'],color = "green",label = "Full electric")
plt.plot(ghr['Model Year'],ghr['Count'],color = "orange",label = "Hybrid")
plt.xlabel("Model Year")
plt.ylabel("Count")
plt.legend()
plt.show()














df = pd.read_csv("us_electric_carR.csv")
df = df[df['Model Year'] <2024]

def get_electric_hybrid_analytics(county):
    county = str(county).strip()
    k = df[df['County'] == county].copy()
    pdf = k.pivot_table(index='Model Year', columns='Electric Vehicle Type', aggfunc='size', fill_value=0)
    pdf = pdf.reset_index()
    pdf.columns = ['Model Year', 'Battery Electric Vehicle', 'Plug-in Hybrid Electric Vehicle']

    plt.plot(pdf['Model Year'],pdf['Battery Electric Vehicle'],color = "green",label="Battery Electric Vehicle")
    plt.plot(pdf['Model Year'],pdf['Plug-in Hybrid Electric Vehicle'],color = "orange",label="Plug-in Hybrid Electric Vehicle")
    plt.title(f"Analytics in county {county}")
    plt.xlabel("Model year")
    plt.xlabel("count")
    plt.legend()
    plt.show()

county = input("Enter the name of county : ")
get_electric_hybrid_analytics(county)



HERE WROTE A FUNCTION TO ANALYZE TRENDS IN ELECTRIC V/S THAT OF HYBRID

FOR EXAMPLE 

Enter the name of county : King


FIGURE E21









